//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PseudoCode.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using AntlrDenter;

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class PseudoCodeLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		STRING=1, CHAR=2, DECIMAL=3, INTEGER=4, BOOLEAN=5, DATE=6, NL=7, NEWLINE=8, 
		DECLARE=9, CONSTANT=10, IO_KEYWORD=11, TYPENAME=12, ARRAY=13, CASE=14, 
		OF=15, OTHERWISE=16, ENDCASE=17, DO=18, FOR=19, TO=20, STEP=21, NEXT=22, 
		WHILE=23, ENDWHILE=24, REPEAT=25, UNTIL=26, IF=27, THEN=28, ELSE=29, ENDIF=30, 
		PROCEDURE=31, ENDPROCEDURE=32, CALL=33, FUNCTION=34, ENDFUNCTION=35, RETURNS=36, 
		RETURN=37, TYPE=38, ENDTYPE=39, AND=40, OR=41, NOT=42, IDENTIFIER=43, 
		OPEN_PAREN=44, CLOSE_PAREN=45, OPEN_BRACK=46, CLOSE_BRACK=47, OPEN_BRACE=48, 
		CLOSE_BRACE=49, COLON=50, COMMA=51, DOT=52, ADD=53, SUB=54, MULT=55, INTDIV=56, 
		DIV=57, MOD=58, POW=59, EQUAL=60, GREATER=61, SMALLER=62, GREATER_EQUAL=63, 
		SMALLER_EQUAL=64, UNEQUAL=65, ASSIGNMENT_NOTATION=66, SKIP_=67, UNKNOWN_CHAR=68;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"STRING", "CHAR", "DECIMAL", "INTEGER", "BOOLEAN", "DATE", "NL", "NEWLINE", 
		"DECLARE", "CONSTANT", "IO_KEYWORD", "TYPENAME", "ARRAY", "CASE", "OF", 
		"OTHERWISE", "ENDCASE", "DO", "FOR", "TO", "STEP", "NEXT", "WHILE", "ENDWHILE", 
		"REPEAT", "UNTIL", "IF", "THEN", "ELSE", "ENDIF", "PROCEDURE", "ENDPROCEDURE", 
		"CALL", "FUNCTION", "ENDFUNCTION", "RETURNS", "RETURN", "TYPE", "ENDTYPE", 
		"AND", "OR", "NOT", "IDENTIFIER", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACK", 
		"CLOSE_BRACK", "OPEN_BRACE", "CLOSE_BRACE", "COLON", "COMMA", "DOT", "ADD", 
		"SUB", "MULT", "INTDIV", "DIV", "MOD", "POW", "EQUAL", "GREATER", "SMALLER", 
		"GREATER_EQUAL", "SMALLER_EQUAL", "UNEQUAL", "ASSIGNMENT_NOTATION", "SKIP_", 
		"UNKNOWN_CHAR", "NON_ZERO_DIGIT", "DIGIT", "SPACES", "COMMENT", "LINE_JOINING", 
		"ID_START", "ID_CONTINUE"
	};


	private DenterHelper denter;
	  
	public override IToken NextToken()
	{
	    if (denter == null)
	    {
	        denter = DenterHelper.Builder()
	            .Nl(NL)
	            .Indent(PseudoCodeParser.INDENT)
	            .Dedent(PseudoCodeParser.DEDENT)
	            .PullToken(base.NextToken);
	    }

	    return denter.NextToken();
	}


	public PseudoCodeLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public PseudoCodeLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, "'DECLARE'", "'CONSTANT'", 
		null, null, "'ARRAY'", "'CASE'", "'OF'", "'OTHERWISE'", "'ENDCASE'", "'DO'", 
		"'FOR'", "'TO'", "'STEP'", "'NEXT'", "'WHILE'", "'ENDWHILE'", "'REPEAT'", 
		"'UNTIL'", "'IF'", "'THEN'", "'ELSE'", "'ENDIF'", "'PROCEDURE'", "'ENDPROCEDURE'", 
		"'CALL'", "'FUNCTION'", "'ENDFUNCTION'", "'RETURNS'", "'RETURN'", "'TYPE'", 
		"'ENDTYPE'", "'AND'", "'OR'", "'NOT'", null, "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "':'", "','", "'.'", "'+'", "'-'", "'*'", null, "'/'", null, 
		null, "'='", "'>'", "'<'", "'>='", "'<='", "'<>'", "'<-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "STRING", "CHAR", "DECIMAL", "INTEGER", "BOOLEAN", "DATE", "NL", 
		"NEWLINE", "DECLARE", "CONSTANT", "IO_KEYWORD", "TYPENAME", "ARRAY", "CASE", 
		"OF", "OTHERWISE", "ENDCASE", "DO", "FOR", "TO", "STEP", "NEXT", "WHILE", 
		"ENDWHILE", "REPEAT", "UNTIL", "IF", "THEN", "ELSE", "ENDIF", "PROCEDURE", 
		"ENDPROCEDURE", "CALL", "FUNCTION", "ENDFUNCTION", "RETURNS", "RETURN", 
		"TYPE", "ENDTYPE", "AND", "OR", "NOT", "IDENTIFIER", "OPEN_PAREN", "CLOSE_PAREN", 
		"OPEN_BRACK", "CLOSE_BRACK", "OPEN_BRACE", "CLOSE_BRACE", "COLON", "COMMA", 
		"DOT", "ADD", "SUB", "MULT", "INTDIV", "DIV", "MOD", "POW", "EQUAL", "GREATER", 
		"SMALLER", "GREATER_EQUAL", "SMALLER_EQUAL", "UNEQUAL", "ASSIGNMENT_NOTATION", 
		"SKIP_", "UNKNOWN_CHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PseudoCode.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PseudoCodeLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,68,612,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
		7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
		7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,1,0,1,0,5,0,154,8,0,10,0,
		12,0,157,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,3,2,166,8,2,1,2,5,2,169,8,2,10,
		2,12,2,172,9,2,1,2,1,2,4,2,176,8,2,11,2,12,2,177,1,2,4,2,181,8,2,11,2,
		12,2,182,1,2,1,2,5,2,187,8,2,10,2,12,2,190,9,2,3,2,192,8,2,1,3,3,3,195,
		8,3,1,3,4,3,198,8,3,11,3,12,3,199,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		3,4,211,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,3,6,225,8,
		6,1,6,1,6,5,6,229,8,6,10,6,12,6,232,9,6,1,7,3,7,235,8,7,1,7,1,7,3,7,239,
		8,7,1,7,3,7,242,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,
		9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,3,10,277,8,10,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,311,8,
		11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,
		14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,
		16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,
		19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,
		22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,
		24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,
		27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,
		29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,
		31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,
		32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,
		34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,
		35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,
		37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,40,1,
		40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,5,42,502,8,42,10,42,12,42,505,9,
		42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,
		49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,55,1,
		55,1,55,3,55,536,8,55,1,56,1,56,1,57,1,57,1,57,1,57,3,57,544,8,57,1,58,
		1,58,1,58,1,58,3,58,550,8,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,
		62,1,63,1,63,1,63,1,64,1,64,1,64,1,65,1,65,1,65,1,66,1,66,1,66,3,66,573,
		8,66,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,70,4,70,584,8,70,11,70,
		12,70,585,1,71,1,71,5,71,590,8,71,10,71,12,71,593,9,71,1,72,1,72,3,72,
		597,8,72,1,72,3,72,600,8,72,1,72,1,72,3,72,604,8,72,1,73,3,73,607,8,73,
		1,74,1,74,3,74,611,8,74,1,155,0,75,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
		17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
		41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,
		65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,
		89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,
		111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,127,64,129,65,
		131,66,133,67,135,68,137,0,139,0,141,0,143,0,145,0,147,0,149,0,1,0,5,1,
		0,49,57,1,0,48,57,2,0,9,9,32,32,2,0,10,10,12,13,3,0,65,90,95,95,97,122,
		638,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
		0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
		0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
		1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
		0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
		1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
		0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
		1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,
		0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,
		1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,
		1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,
		1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,
		1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,1,151,1,0,0,0,3,160,
		1,0,0,0,5,165,1,0,0,0,7,194,1,0,0,0,9,210,1,0,0,0,11,212,1,0,0,0,13,224,
		1,0,0,0,15,238,1,0,0,0,17,243,1,0,0,0,19,251,1,0,0,0,21,276,1,0,0,0,23,
		310,1,0,0,0,25,312,1,0,0,0,27,318,1,0,0,0,29,323,1,0,0,0,31,326,1,0,0,
		0,33,336,1,0,0,0,35,344,1,0,0,0,37,347,1,0,0,0,39,351,1,0,0,0,41,354,1,
		0,0,0,43,359,1,0,0,0,45,364,1,0,0,0,47,370,1,0,0,0,49,379,1,0,0,0,51,386,
		1,0,0,0,53,392,1,0,0,0,55,395,1,0,0,0,57,400,1,0,0,0,59,405,1,0,0,0,61,
		411,1,0,0,0,63,421,1,0,0,0,65,434,1,0,0,0,67,439,1,0,0,0,69,448,1,0,0,
		0,71,460,1,0,0,0,73,468,1,0,0,0,75,475,1,0,0,0,77,480,1,0,0,0,79,488,1,
		0,0,0,81,492,1,0,0,0,83,495,1,0,0,0,85,499,1,0,0,0,87,506,1,0,0,0,89,508,
		1,0,0,0,91,510,1,0,0,0,93,512,1,0,0,0,95,514,1,0,0,0,97,516,1,0,0,0,99,
		518,1,0,0,0,101,520,1,0,0,0,103,522,1,0,0,0,105,524,1,0,0,0,107,526,1,
		0,0,0,109,528,1,0,0,0,111,535,1,0,0,0,113,537,1,0,0,0,115,543,1,0,0,0,
		117,549,1,0,0,0,119,551,1,0,0,0,121,553,1,0,0,0,123,555,1,0,0,0,125,557,
		1,0,0,0,127,560,1,0,0,0,129,563,1,0,0,0,131,566,1,0,0,0,133,572,1,0,0,
		0,135,576,1,0,0,0,137,578,1,0,0,0,139,580,1,0,0,0,141,583,1,0,0,0,143,
		587,1,0,0,0,145,594,1,0,0,0,147,606,1,0,0,0,149,610,1,0,0,0,151,155,5,
		34,0,0,152,154,9,0,0,0,153,152,1,0,0,0,154,157,1,0,0,0,155,156,1,0,0,0,
		155,153,1,0,0,0,156,158,1,0,0,0,157,155,1,0,0,0,158,159,5,34,0,0,159,2,
		1,0,0,0,160,161,5,39,0,0,161,162,9,0,0,0,162,163,5,39,0,0,163,4,1,0,0,
		0,164,166,5,45,0,0,165,164,1,0,0,0,165,166,1,0,0,0,166,191,1,0,0,0,167,
		169,3,139,69,0,168,167,1,0,0,0,169,172,1,0,0,0,170,168,1,0,0,0,170,171,
		1,0,0,0,171,173,1,0,0,0,172,170,1,0,0,0,173,175,5,46,0,0,174,176,3,139,
		69,0,175,174,1,0,0,0,176,177,1,0,0,0,177,175,1,0,0,0,177,178,1,0,0,0,178,
		192,1,0,0,0,179,181,3,139,69,0,180,179,1,0,0,0,181,182,1,0,0,0,182,180,
		1,0,0,0,182,183,1,0,0,0,183,184,1,0,0,0,184,188,5,46,0,0,185,187,3,139,
		69,0,186,185,1,0,0,0,187,190,1,0,0,0,188,186,1,0,0,0,188,189,1,0,0,0,189,
		192,1,0,0,0,190,188,1,0,0,0,191,170,1,0,0,0,191,180,1,0,0,0,192,6,1,0,
		0,0,193,195,5,45,0,0,194,193,1,0,0,0,194,195,1,0,0,0,195,197,1,0,0,0,196,
		198,3,139,69,0,197,196,1,0,0,0,198,199,1,0,0,0,199,197,1,0,0,0,199,200,
		1,0,0,0,200,8,1,0,0,0,201,202,5,84,0,0,202,203,5,82,0,0,203,204,5,85,0,
		0,204,211,5,69,0,0,205,206,5,70,0,0,206,207,5,65,0,0,207,208,5,76,0,0,
		208,209,5,83,0,0,209,211,5,69,0,0,210,201,1,0,0,0,210,205,1,0,0,0,211,
		10,1,0,0,0,212,213,3,139,69,0,213,214,3,139,69,0,214,215,5,47,0,0,215,
		216,3,139,69,0,216,217,3,139,69,0,217,218,5,47,0,0,218,219,3,139,69,0,
		219,220,3,139,69,0,220,221,3,139,69,0,221,222,3,139,69,0,222,12,1,0,0,
		0,223,225,5,13,0,0,224,223,1,0,0,0,224,225,1,0,0,0,225,226,1,0,0,0,226,
		230,5,10,0,0,227,229,5,32,0,0,228,227,1,0,0,0,229,232,1,0,0,0,230,228,
		1,0,0,0,230,231,1,0,0,0,231,14,1,0,0,0,232,230,1,0,0,0,233,235,5,13,0,
		0,234,233,1,0,0,0,234,235,1,0,0,0,235,236,1,0,0,0,236,239,5,10,0,0,237,
		239,2,12,13,0,238,234,1,0,0,0,238,237,1,0,0,0,239,241,1,0,0,0,240,242,
		3,141,70,0,241,240,1,0,0,0,241,242,1,0,0,0,242,16,1,0,0,0,243,244,5,68,
		0,0,244,245,5,69,0,0,245,246,5,67,0,0,246,247,5,76,0,0,247,248,5,65,0,
		0,248,249,5,82,0,0,249,250,5,69,0,0,250,18,1,0,0,0,251,252,5,67,0,0,252,
		253,5,79,0,0,253,254,5,78,0,0,254,255,5,83,0,0,255,256,5,84,0,0,256,257,
		5,65,0,0,257,258,5,78,0,0,258,259,5,84,0,0,259,20,1,0,0,0,260,261,5,80,
		0,0,261,262,5,82,0,0,262,263,5,73,0,0,263,264,5,78,0,0,264,277,5,84,0,
		0,265,266,5,79,0,0,266,267,5,85,0,0,267,268,5,84,0,0,268,269,5,80,0,0,
		269,270,5,85,0,0,270,277,5,84,0,0,271,272,5,73,0,0,272,273,5,78,0,0,273,
		274,5,80,0,0,274,275,5,85,0,0,275,277,5,84,0,0,276,260,1,0,0,0,276,265,
		1,0,0,0,276,271,1,0,0,0,277,22,1,0,0,0,278,279,5,73,0,0,279,280,5,78,0,
		0,280,281,5,84,0,0,281,282,5,69,0,0,282,283,5,71,0,0,283,284,5,69,0,0,
		284,311,5,82,0,0,285,286,5,83,0,0,286,287,5,84,0,0,287,288,5,82,0,0,288,
		289,5,73,0,0,289,290,5,78,0,0,290,311,5,71,0,0,291,292,5,82,0,0,292,293,
		5,69,0,0,293,294,5,65,0,0,294,311,5,76,0,0,295,296,5,67,0,0,296,297,5,
		72,0,0,297,298,5,65,0,0,298,311,5,82,0,0,299,300,5,66,0,0,300,301,5,79,
		0,0,301,302,5,79,0,0,302,303,5,76,0,0,303,304,5,69,0,0,304,305,5,65,0,
		0,305,311,5,78,0,0,306,307,5,68,0,0,307,308,5,65,0,0,308,309,5,84,0,0,
		309,311,5,69,0,0,310,278,1,0,0,0,310,285,1,0,0,0,310,291,1,0,0,0,310,295,
		1,0,0,0,310,299,1,0,0,0,310,306,1,0,0,0,311,24,1,0,0,0,312,313,5,65,0,
		0,313,314,5,82,0,0,314,315,5,82,0,0,315,316,5,65,0,0,316,317,5,89,0,0,
		317,26,1,0,0,0,318,319,5,67,0,0,319,320,5,65,0,0,320,321,5,83,0,0,321,
		322,5,69,0,0,322,28,1,0,0,0,323,324,5,79,0,0,324,325,5,70,0,0,325,30,1,
		0,0,0,326,327,5,79,0,0,327,328,5,84,0,0,328,329,5,72,0,0,329,330,5,69,
		0,0,330,331,5,82,0,0,331,332,5,87,0,0,332,333,5,73,0,0,333,334,5,83,0,
		0,334,335,5,69,0,0,335,32,1,0,0,0,336,337,5,69,0,0,337,338,5,78,0,0,338,
		339,5,68,0,0,339,340,5,67,0,0,340,341,5,65,0,0,341,342,5,83,0,0,342,343,
		5,69,0,0,343,34,1,0,0,0,344,345,5,68,0,0,345,346,5,79,0,0,346,36,1,0,0,
		0,347,348,5,70,0,0,348,349,5,79,0,0,349,350,5,82,0,0,350,38,1,0,0,0,351,
		352,5,84,0,0,352,353,5,79,0,0,353,40,1,0,0,0,354,355,5,83,0,0,355,356,
		5,84,0,0,356,357,5,69,0,0,357,358,5,80,0,0,358,42,1,0,0,0,359,360,5,78,
		0,0,360,361,5,69,0,0,361,362,5,88,0,0,362,363,5,84,0,0,363,44,1,0,0,0,
		364,365,5,87,0,0,365,366,5,72,0,0,366,367,5,73,0,0,367,368,5,76,0,0,368,
		369,5,69,0,0,369,46,1,0,0,0,370,371,5,69,0,0,371,372,5,78,0,0,372,373,
		5,68,0,0,373,374,5,87,0,0,374,375,5,72,0,0,375,376,5,73,0,0,376,377,5,
		76,0,0,377,378,5,69,0,0,378,48,1,0,0,0,379,380,5,82,0,0,380,381,5,69,0,
		0,381,382,5,80,0,0,382,383,5,69,0,0,383,384,5,65,0,0,384,385,5,84,0,0,
		385,50,1,0,0,0,386,387,5,85,0,0,387,388,5,78,0,0,388,389,5,84,0,0,389,
		390,5,73,0,0,390,391,5,76,0,0,391,52,1,0,0,0,392,393,5,73,0,0,393,394,
		5,70,0,0,394,54,1,0,0,0,395,396,5,84,0,0,396,397,5,72,0,0,397,398,5,69,
		0,0,398,399,5,78,0,0,399,56,1,0,0,0,400,401,5,69,0,0,401,402,5,76,0,0,
		402,403,5,83,0,0,403,404,5,69,0,0,404,58,1,0,0,0,405,406,5,69,0,0,406,
		407,5,78,0,0,407,408,5,68,0,0,408,409,5,73,0,0,409,410,5,70,0,0,410,60,
		1,0,0,0,411,412,5,80,0,0,412,413,5,82,0,0,413,414,5,79,0,0,414,415,5,67,
		0,0,415,416,5,69,0,0,416,417,5,68,0,0,417,418,5,85,0,0,418,419,5,82,0,
		0,419,420,5,69,0,0,420,62,1,0,0,0,421,422,5,69,0,0,422,423,5,78,0,0,423,
		424,5,68,0,0,424,425,5,80,0,0,425,426,5,82,0,0,426,427,5,79,0,0,427,428,
		5,67,0,0,428,429,5,69,0,0,429,430,5,68,0,0,430,431,5,85,0,0,431,432,5,
		82,0,0,432,433,5,69,0,0,433,64,1,0,0,0,434,435,5,67,0,0,435,436,5,65,0,
		0,436,437,5,76,0,0,437,438,5,76,0,0,438,66,1,0,0,0,439,440,5,70,0,0,440,
		441,5,85,0,0,441,442,5,78,0,0,442,443,5,67,0,0,443,444,5,84,0,0,444,445,
		5,73,0,0,445,446,5,79,0,0,446,447,5,78,0,0,447,68,1,0,0,0,448,449,5,69,
		0,0,449,450,5,78,0,0,450,451,5,68,0,0,451,452,5,70,0,0,452,453,5,85,0,
		0,453,454,5,78,0,0,454,455,5,67,0,0,455,456,5,84,0,0,456,457,5,73,0,0,
		457,458,5,79,0,0,458,459,5,78,0,0,459,70,1,0,0,0,460,461,5,82,0,0,461,
		462,5,69,0,0,462,463,5,84,0,0,463,464,5,85,0,0,464,465,5,82,0,0,465,466,
		5,78,0,0,466,467,5,83,0,0,467,72,1,0,0,0,468,469,5,82,0,0,469,470,5,69,
		0,0,470,471,5,84,0,0,471,472,5,85,0,0,472,473,5,82,0,0,473,474,5,78,0,
		0,474,74,1,0,0,0,475,476,5,84,0,0,476,477,5,89,0,0,477,478,5,80,0,0,478,
		479,5,69,0,0,479,76,1,0,0,0,480,481,5,69,0,0,481,482,5,78,0,0,482,483,
		5,68,0,0,483,484,5,84,0,0,484,485,5,89,0,0,485,486,5,80,0,0,486,487,5,
		69,0,0,487,78,1,0,0,0,488,489,5,65,0,0,489,490,5,78,0,0,490,491,5,68,0,
		0,491,80,1,0,0,0,492,493,5,79,0,0,493,494,5,82,0,0,494,82,1,0,0,0,495,
		496,5,78,0,0,496,497,5,79,0,0,497,498,5,84,0,0,498,84,1,0,0,0,499,503,
		3,147,73,0,500,502,3,149,74,0,501,500,1,0,0,0,502,505,1,0,0,0,503,501,
		1,0,0,0,503,504,1,0,0,0,504,86,1,0,0,0,505,503,1,0,0,0,506,507,5,40,0,
		0,507,88,1,0,0,0,508,509,5,41,0,0,509,90,1,0,0,0,510,511,5,91,0,0,511,
		92,1,0,0,0,512,513,5,93,0,0,513,94,1,0,0,0,514,515,5,123,0,0,515,96,1,
		0,0,0,516,517,5,125,0,0,517,98,1,0,0,0,518,519,5,58,0,0,519,100,1,0,0,
		0,520,521,5,44,0,0,521,102,1,0,0,0,522,523,5,46,0,0,523,104,1,0,0,0,524,
		525,5,43,0,0,525,106,1,0,0,0,526,527,5,45,0,0,527,108,1,0,0,0,528,529,
		5,42,0,0,529,110,1,0,0,0,530,531,5,68,0,0,531,532,5,73,0,0,532,536,5,86,
		0,0,533,534,5,47,0,0,534,536,5,47,0,0,535,530,1,0,0,0,535,533,1,0,0,0,
		536,112,1,0,0,0,537,538,5,47,0,0,538,114,1,0,0,0,539,540,5,77,0,0,540,
		541,5,79,0,0,541,544,5,68,0,0,542,544,5,37,0,0,543,539,1,0,0,0,543,542,
		1,0,0,0,544,116,1,0,0,0,545,546,5,80,0,0,546,547,5,79,0,0,547,550,5,87,
		0,0,548,550,5,94,0,0,549,545,1,0,0,0,549,548,1,0,0,0,550,118,1,0,0,0,551,
		552,5,61,0,0,552,120,1,0,0,0,553,554,5,62,0,0,554,122,1,0,0,0,555,556,
		5,60,0,0,556,124,1,0,0,0,557,558,5,62,0,0,558,559,5,61,0,0,559,126,1,0,
		0,0,560,561,5,60,0,0,561,562,5,61,0,0,562,128,1,0,0,0,563,564,5,60,0,0,
		564,565,5,62,0,0,565,130,1,0,0,0,566,567,5,60,0,0,567,568,5,45,0,0,568,
		132,1,0,0,0,569,573,3,141,70,0,570,573,3,143,71,0,571,573,3,145,72,0,572,
		569,1,0,0,0,572,570,1,0,0,0,572,571,1,0,0,0,573,574,1,0,0,0,574,575,6,
		66,0,0,575,134,1,0,0,0,576,577,9,0,0,0,577,136,1,0,0,0,578,579,7,0,0,0,
		579,138,1,0,0,0,580,581,7,1,0,0,581,140,1,0,0,0,582,584,7,2,0,0,583,582,
		1,0,0,0,584,585,1,0,0,0,585,583,1,0,0,0,585,586,1,0,0,0,586,142,1,0,0,
		0,587,591,5,35,0,0,588,590,8,3,0,0,589,588,1,0,0,0,590,593,1,0,0,0,591,
		589,1,0,0,0,591,592,1,0,0,0,592,144,1,0,0,0,593,591,1,0,0,0,594,596,5,
		92,0,0,595,597,3,141,70,0,596,595,1,0,0,0,596,597,1,0,0,0,597,603,1,0,
		0,0,598,600,5,13,0,0,599,598,1,0,0,0,599,600,1,0,0,0,600,601,1,0,0,0,601,
		604,5,10,0,0,602,604,2,12,13,0,603,599,1,0,0,0,603,602,1,0,0,0,604,146,
		1,0,0,0,605,607,7,4,0,0,606,605,1,0,0,0,607,148,1,0,0,0,608,611,3,147,
		73,0,609,611,7,1,0,0,610,608,1,0,0,0,610,609,1,0,0,0,611,150,1,0,0,0,30,
		0,155,165,170,177,182,188,191,194,199,210,224,230,234,238,241,276,310,
		503,535,543,549,572,585,591,596,599,603,606,610,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
