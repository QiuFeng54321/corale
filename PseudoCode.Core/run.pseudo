// Type test
DECLARE a : REAL
DECLARE b : ARRAY[1:3, 1:4] OF INTEGER
DECLARE c : BOOLEAN
DECLARE Char : CHAR
DECLARE Date : DATE
a <- -(a + a * -a POW 2 POW 3) DIV 100 MOD 100
c <- a < 63 - 2.3 OR (a > 65 OR a > 63) AND NOT a < 65 AND TRUE
Char <- '\n'
Date <- 28/02/2008 + 10/03/0010
OUTPUT a + 2 + a, c, Char, Date
IF a <> 64 THEN
    OUTPUT b
ELSE
    OUTPUT a
ENDIF
b <- [[1, 2, 3, 4],[5, 6, 7, 8], [9, 10, 11, 12]]
b[2,3] <- 3
b[3] <- [10, 11, 12, 13]
OUTPUT b
// Undeclared variable
eaf <- 1.2 + 2
eaf <- eaf + 1
OUTPUT "eaf:", eaf

// Uses for-loop to make a wing
Wing <- ""
MaxLength <- 80
FOR i <- 1 TO MaxLength STEP i
    OUTPUT "i =", i
    FOR j <- i TO MaxLength
        Wing <- Wing & "*"
    NEXT j
    Wing <- Wing & '\n'
NEXT i
OUTPUT Wing

// Fibonacci sequence
DECLARE FibCount : INTEGER
OUTPUT "Max length of sequence?"
INPUT MaxLength
DECLARE FibSeq : ARRAY[1:MaxLength] OF INTEGER
FibSeq[1] <- 1
FibSeq[2] <- 1
TopCalculated <- 2
ContinueFib <- TRUE
WHILE ContinueFib DO
    k <- 1
    REPEAT
        OUTPUT "Input Fib Count (1 to", MaxLength, "):"
        INPUT FibCount
    UNTIL FibCount <= MaxLength AND FibCount >= 1
    WHILE TopCalculated < FibCount DO
        TopCalculated <- TopCalculated + 1
        FibSeq[TopCalculated] <- FibSeq[TopCalculated - 2] + FibSeq[TopCalculated - 1]
    ENDWHILE
    OUTPUT "The", FibCount, "th fibonacci number is:", FibSeq[FibCount]
    OUTPUT "The whole array is:", FibSeq
    OUTPUT "Continue?"
    INPUT ContinueFib
ENDWHILE