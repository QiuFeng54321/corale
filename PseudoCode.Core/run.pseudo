

arr <- [2]
DECLARE a : REAL
DECLARE b : ARRAY[1:3, 1:4] OF INTEGER
DECLARE c : BOOLEAN
DECLARE Char : CHAR
DECLARE Date : DATE
DECLARE Date2 : DATE
TYPE IntPtr = ^INTEGER
DECLARE iptr : IntPtr
CONSTANT CONST = 498 + 35
iptr <- ^Char
OUTPUT CONST + 4
OUTPUT CONST + 5
OUTPUT "Right: " & RIGHT("ABCDEFGH", 3) & " " & MID("ABCDEFGH", 2, 3)
FOR ri <- 1 TO 10
    OUTPUT "The " & ri & "th random number [1..10]: " & RAND(10)
NEXT ri
TYPE Student
    DECLARE Name : STRING
    DECLARE Id : INTEGER
ENDTYPE
DECLARE Students : ARRAY[1:10] OF Student
FOR i <- 1 TO 10
    Students[i].Name <- "Student" & i
    Students[i].Id <- i
NEXT i
OUTPUT Students
a <- 0
a <- -(a + a * -a POW 2 POW 3) DIV 100 MOD 100
c <- a < 63 - 2.3 OR (a > 65 OR a > 63) AND NOT a < 65 AND TRUE
Char <- '\n'
DECLARE DatePtr : ^DATE
DatePtr <- (^Char) + 1
OUTPUT ^Char, iptr, DatePtr^ // DatePtr points to unassigned value
Date <- 28/02/2008 + 10/03/0010
OUTPUT DatePtr^
OUTPUT a + 2 + a, c, Char, Date
IF a <> 64 THEN
    OUTPUT b
ELSE
    OUTPUT a
ENDIF
b <- [[1, 2, 3, 4],[5, 6, 7, 8], [9, 10, 11, 12]]
b[2,3] <- 3
b[3] <- [10, 11, 12, 13]
OUTPUT b
// Undeclared variable
eaf <- 1.2 + 2
eaf <- eaf + 1
OUTPUT "eaf:", eaf

// Uses for-loop to make a wing
Wing <- ""
MaxLength <- 80

FOR i <- 1 TO MaxLength STEP i
    OUTPUT "i =", i
    FOR j <- i TO MaxLength
        Wing <- Wing & "*"
    NEXT j
    Wing <- Wing & '\n'
NEXT i
OUTPUT Wing

// Fibonacci sequence
DECLARE FibCount : INTEGER
OUTPUT "Max length of sequence?"
INPUT MaxLength
DECLARE FibSeq : ARRAY[1:MaxLength] OF INTEGER
FibSeq[1] <- 1
FibSeq[2] <- 1
TopCalculated <- 2
ContinueFib <- TRUE
WHILE ContinueFib DO
    k <- 1
    REPEAT
        OUTPUT "Input Fib Count (1 to", MaxLength, "):"
        INPUT FibCount
    UNTIL FibCount <= MaxLength AND FibCount >= 1
    WHILE TopCalculated < FibCount DO
        TopCalculated <- TopCalculated + 1
        FibSeq[TopCalculated] <- FibSeq[TopCalculated - 2] + FibSeq[TopCalculated - 1]
    ENDWHILE
    OUTPUT "The", FibCount, "th fibonacci number is:", FibSeq[FibCount]
    OUTPUT "The whole array is:", FibSeq
    OUTPUT "Continue?"
    INPUT ContinueFib
ENDWHILE

FUNCTION fib(n: INTEGER) RETURNS INTEGER
    IF n = 2 OR n = 1 THEN
        RETURN 1
    ENDIF
    RETURN fib(n - 1) + fib(n - 2)
ENDFUNCTION
OUTPUT "Fib of:"
INPUT Num
OUTPUT "It is:", fib(Num)
FUNCTION assign(BYREF n: INTEGER, val: INTEGER) RETURNS INTEGER
    n <- val
    RETURN val
ENDFUNCTION

n <- 10
res <- assign(n, 20)
OUTPUT "Assigned n is", n
// Type test
REPEAT
    INPUT something
    OUTPUT something
UNTIL something = "YES"