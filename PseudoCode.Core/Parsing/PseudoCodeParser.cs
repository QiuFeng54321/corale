//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PseudoCode.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using PseudoCode.Core.Runtime;
using Range = PseudoCode.Core.Runtime.Range;
using System.Globalization;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class PseudoCodeParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Character=1, String=2, Date=3, NumberSequence=4, Boolean=5, NL=6, Newline=7, 
		Declare=8, Constant=9, IoKeyword=10, Typename=11, Array=12, Case=13, Of=14, 
		Otherwise=15, Endcase=16, For=17, To=18, Step=19, Next=20, While=21, Do=22, 
		Endwhile=23, Repeat=24, Until=25, If=26, Then=27, Else=28, Endif=29, Procedure=30, 
		Endprocedure=31, Call=32, Function=33, Endfunction=34, Byval=35, Byref=36, 
		Returns=37, Return=38, Type=39, Endtype=40, OpenFile=41, ReadFile=42, 
		WriteFile=43, CloseFile=44, Seek=45, GetRecord=46, PutRecord=47, Read=48, 
		Write=49, Append=50, Random=51, Class=52, Endclass=53, Inherits=54, Private=55, 
		Public=56, New=57, And=58, Or=59, Not=60, OpenParen=61, CloseParen=62, 
		OpenBrack=63, CloseBrack=64, OpenBrace=65, CloseBrace=66, Colon=67, Comma=68, 
		Dot=69, Add=70, Subtract=71, Multiply=72, BitAnd=73, IntDivide=74, Divide=75, 
		Mod=76, Pow=77, Caret=78, Equal=79, Greater=80, Smaller=81, GreaterEqual=82, 
		SmallerEqual=83, NotEqual=84, AssignmentNotation=85, Identifier=86, Skip=87, 
		UnknownChar=88, INDENT=89, DEDENT=90;
	public const int
		RULE_fileInput = 0, RULE_singleInput = 1, RULE_statement = 2, RULE_simpleStatement = 3, 
		RULE_smallStatement = 4, RULE_assignmentStatement = 5, RULE_declarationStatement = 6, 
		RULE_constantStatement = 7, RULE_ioStatement = 8, RULE_returnStatement = 9, 
		RULE_callStatement = 10, RULE_fileStatement = 11, RULE_compoundStatement = 12, 
		RULE_scopedExpression = 13, RULE_indentedBlock = 14, RULE_alignedBlock = 15, 
		RULE_ifStatement = 16, RULE_forStatement = 17, RULE_whileStatement = 18, 
		RULE_repeatStatement = 19, RULE_caseStatement = 20, RULE_caseBranch = 21, 
		RULE_caseBody = 22, RULE_valueRange = 23, RULE_procedureDefinition = 24, 
		RULE_functionDefinition = 25, RULE_argumentsDeclaration = 26, RULE_argumentDeclaration = 27, 
		RULE_tuple = 28, RULE_enumDefinition = 29, RULE_pointerDefinition = 30, 
		RULE_typeDefinition = 31, RULE_typeBody = 32, RULE_typeChild = 33, RULE_classDefinition = 34, 
		RULE_classBody = 35, RULE_classDataMember = 36, RULE_classMethod = 37, 
		RULE_accessLevel = 38, RULE_expression = 39, RULE_logicExpression = 40, 
		RULE_comparisonOp = 41, RULE_arithmeticExpression = 42, RULE_arguments = 43, 
		RULE_atom = 44, RULE_dataType = 45, RULE_basicDataType = 46, RULE_arrayRange = 47, 
		RULE_array = 48, RULE_number = 49, RULE_decimal = 50, RULE_integer = 51, 
		RULE_identifierWithNew = 52;
	public static readonly string[] ruleNames = {
		"fileInput", "singleInput", "statement", "simpleStatement", "smallStatement", 
		"assignmentStatement", "declarationStatement", "constantStatement", "ioStatement", 
		"returnStatement", "callStatement", "fileStatement", "compoundStatement", 
		"scopedExpression", "indentedBlock", "alignedBlock", "ifStatement", "forStatement", 
		"whileStatement", "repeatStatement", "caseStatement", "caseBranch", "caseBody", 
		"valueRange", "procedureDefinition", "functionDefinition", "argumentsDeclaration", 
		"argumentDeclaration", "tuple", "enumDefinition", "pointerDefinition", 
		"typeDefinition", "typeBody", "typeChild", "classDefinition", "classBody", 
		"classDataMember", "classMethod", "accessLevel", "expression", "logicExpression", 
		"comparisonOp", "arithmeticExpression", "arguments", "atom", "dataType", 
		"basicDataType", "arrayRange", "array", "number", "decimal", "integer", 
		"identifierWithNew"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'DECLARE'", "'CONSTANT'", 
		null, null, "'ARRAY'", "'CASE'", "'OF'", "'OTHERWISE'", "'ENDCASE'", "'FOR'", 
		"'TO'", "'STEP'", "'NEXT'", "'WHILE'", "'DO'", "'ENDWHILE'", "'REPEAT'", 
		"'UNTIL'", "'IF'", "'THEN'", "'ELSE'", "'ENDIF'", "'PROCEDURE'", "'ENDPROCEDURE'", 
		"'CALL'", "'FUNCTION'", "'ENDFUNCTION'", "'BYVAL'", "'BYREF'", "'RETURNS'", 
		"'RETURN'", "'TYPE'", "'ENDTYPE'", "'OPENFILE'", "'READFILE'", "'WRITEFILE'", 
		"'CLOSEFILE'", "'SEEK'", "'GETRECORD'", "'PUTRECORD'", "'READ'", "'WRITE'", 
		"'APPEND'", "'RANDOM'", "'CLASS'", "'ENDCLASS'", "'INHERITS'", "'PRIVATE'", 
		"'PUBLIC'", "'NEW'", "'AND'", "'OR'", "'NOT'", "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "':'", "','", "'.'", "'+'", "'-'", "'*'", "'&'", "'DIV'", 
		"'/'", "'MOD'", "'POW'", "'^'", "'='", "'>'", "'<'", "'>='", "'<='", "'<>'", 
		"'<-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Character", "String", "Date", "NumberSequence", "Boolean", "NL", 
		"Newline", "Declare", "Constant", "IoKeyword", "Typename", "Array", "Case", 
		"Of", "Otherwise", "Endcase", "For", "To", "Step", "Next", "While", "Do", 
		"Endwhile", "Repeat", "Until", "If", "Then", "Else", "Endif", "Procedure", 
		"Endprocedure", "Call", "Function", "Endfunction", "Byval", "Byref", "Returns", 
		"Return", "Type", "Endtype", "OpenFile", "ReadFile", "WriteFile", "CloseFile", 
		"Seek", "GetRecord", "PutRecord", "Read", "Write", "Append", "Random", 
		"Class", "Endclass", "Inherits", "Private", "Public", "New", "And", "Or", 
		"Not", "OpenParen", "CloseParen", "OpenBrack", "CloseBrack", "OpenBrace", 
		"CloseBrace", "Colon", "Comma", "Dot", "Add", "Subtract", "Multiply", 
		"BitAnd", "IntDivide", "Divide", "Mod", "Pow", "Caret", "Equal", "Greater", 
		"Smaller", "GreaterEqual", "SmallerEqual", "NotEqual", "AssignmentNotation", 
		"Identifier", "Skip", "UnknownChar", "INDENT", "DEDENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PseudoCode.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PseudoCodeParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PseudoCodeParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PseudoCodeParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileInputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PseudoCodeParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FileInputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileInput; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterFileInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitFileInput(this);
		}
	}

	[RuleVersion(0)]
	public FileInputContext fileInput() {
		FileInputContext _localctx = new FileInputContext(Context, State);
		EnterRule(_localctx, 0, RULE_fileInput);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Character) | (1L << String) | (1L << Date) | (1L << NumberSequence) | (1L << Boolean) | (1L << NL) | (1L << Declare) | (1L << Constant) | (1L << IoKeyword) | (1L << Case) | (1L << For) | (1L << While) | (1L << Repeat) | (1L << If) | (1L << Procedure) | (1L << Call) | (1L << Function) | (1L << Return) | (1L << Type) | (1L << OpenFile) | (1L << ReadFile) | (1L << WriteFile) | (1L << CloseFile) | (1L << Seek) | (1L << GetRecord) | (1L << PutRecord) | (1L << Class) | (1L << New) | (1L << Not) | (1L << OpenParen) | (1L << OpenBrack))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (Dot - 69)) | (1L << (Subtract - 69)) | (1L << (Caret - 69)) | (1L << (Identifier - 69)))) != 0)) {
				{
				{
				State = 106;
				statement();
				}
				}
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 112;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleInputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(PseudoCodeParser.NL, 0); }
		public SingleInputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleInput; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterSingleInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitSingleInput(this);
		}
	}

	[RuleVersion(0)]
	public SingleInputContext singleInput() {
		SingleInputContext _localctx = new SingleInputContext(Context, State);
		EnterRule(_localctx, 2, RULE_singleInput);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			statement();
			State = 115;
			Match(NL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(PseudoCodeParser.NL, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 122;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Character:
			case String:
			case Date:
			case NumberSequence:
			case Boolean:
			case Declare:
			case Constant:
			case IoKeyword:
			case Case:
			case For:
			case While:
			case Repeat:
			case If:
			case Procedure:
			case Call:
			case Function:
			case Return:
			case Type:
			case OpenFile:
			case ReadFile:
			case WriteFile:
			case CloseFile:
			case Seek:
			case GetRecord:
			case PutRecord:
			case Class:
			case New:
			case Not:
			case OpenParen:
			case OpenBrack:
			case Dot:
			case Subtract:
			case Caret:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 119;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Character:
				case String:
				case Date:
				case NumberSequence:
				case Boolean:
				case Declare:
				case Constant:
				case IoKeyword:
				case Call:
				case Return:
				case OpenFile:
				case ReadFile:
				case WriteFile:
				case CloseFile:
				case Seek:
				case GetRecord:
				case PutRecord:
				case New:
				case Not:
				case OpenParen:
				case OpenBrack:
				case Dot:
				case Subtract:
				case Caret:
				case Identifier:
					{
					State = 117;
					simpleStatement();
					}
					break;
				case Case:
				case For:
				case While:
				case Repeat:
				case If:
				case Procedure:
				case Function:
				case Type:
				case Class:
					{
					State = 118;
					compoundStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 121;
				Match(NL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SmallStatementContext smallStatement() {
			return GetRuleContext<SmallStatementContext>(0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterSimpleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitSimpleStatement(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStatementContext simpleStatement() {
		SimpleStatementContext _localctx = new SimpleStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_simpleStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			smallStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SmallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationStatementContext declarationStatement() {
			return GetRuleContext<DeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantStatementContext constantStatement() {
			return GetRuleContext<ConstantStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoStatementContext ioStatement() {
			return GetRuleContext<IoStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileStatementContext fileStatement() {
			return GetRuleContext<FileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallStatementContext callStatement() {
			return GetRuleContext<CallStatementContext>(0);
		}
		public SmallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_smallStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterSmallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitSmallStatement(this);
		}
	}

	[RuleVersion(0)]
	public SmallStatementContext smallStatement() {
		SmallStatementContext _localctx = new SmallStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_smallStatement);
		try {
			State = 133;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Character:
			case String:
			case Date:
			case NumberSequence:
			case Boolean:
			case New:
			case Not:
			case OpenParen:
			case OpenBrack:
			case Dot:
			case Subtract:
			case Caret:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 126;
				assignmentStatement();
				}
				break;
			case Declare:
				EnterOuterAlt(_localctx, 2);
				{
				State = 127;
				declarationStatement();
				}
				break;
			case Constant:
				EnterOuterAlt(_localctx, 3);
				{
				State = 128;
				constantStatement();
				}
				break;
			case IoKeyword:
				EnterOuterAlt(_localctx, 4);
				{
				State = 129;
				ioStatement();
				}
				break;
			case OpenFile:
			case ReadFile:
			case WriteFile:
			case CloseFile:
			case Seek:
			case GetRecord:
			case PutRecord:
				EnterOuterAlt(_localctx, 5);
				{
				State = 130;
				fileStatement();
				}
				break;
			case Return:
				EnterOuterAlt(_localctx, 6);
				{
				State = 131;
				returnStatement();
				}
				break;
			case Call:
				EnterOuterAlt(_localctx, 7);
				{
				State = 132;
				callStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssignmentNotation() { return GetToken(PseudoCodeParser.AssignmentNotation, 0); }
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterAssignmentStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitAssignmentStatement(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_assignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			expression();
			State = 136;
			Match(AssignmentNotation);
			State = 137;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Declare() { return GetToken(PseudoCodeParser.Declare, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PseudoCodeParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(PseudoCodeParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public DeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitDeclarationStatement(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationStatementContext declarationStatement() {
		DeclarationStatementContext _localctx = new DeclarationStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_declarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			Match(Declare);
			State = 140;
			Match(Identifier);
			State = 141;
			Match(Colon);
			State = 142;
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constant() { return GetToken(PseudoCodeParser.Constant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PseudoCodeParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(PseudoCodeParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstantStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterConstantStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitConstantStatement(this);
		}
	}

	[RuleVersion(0)]
	public ConstantStatementContext constantStatement() {
		ConstantStatementContext _localctx = new ConstantStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_constantStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(Constant);
			State = 145;
			Match(Identifier);
			State = 146;
			Match(Equal);
			State = 147;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IoKeyword() { return GetToken(PseudoCodeParser.IoKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		public IoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ioStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterIoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitIoStatement(this);
		}
	}

	[RuleVersion(0)]
	public IoStatementContext ioStatement() {
		IoStatementContext _localctx = new IoStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_ioStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			Match(IoKeyword);
			State = 150;
			tuple();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(PseudoCodeParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			Match(Return);
			State = 153;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Call() { return GetToken(PseudoCodeParser.Call, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitCallStatement(this);
		}
	}

	[RuleVersion(0)]
	public CallStatementContext callStatement() {
		CallStatementContext _localctx = new CallStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_callStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			Match(Call);
			State = 156;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileStatementContext : ParserRuleContext {
		public IToken fileMode;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenFile() { return GetToken(PseudoCodeParser.OpenFile, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(PseudoCodeParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Read() { return GetToken(PseudoCodeParser.Read, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Write() { return GetToken(PseudoCodeParser.Write, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Append() { return GetToken(PseudoCodeParser.Append, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Random() { return GetToken(PseudoCodeParser.Random, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ReadFile() { return GetToken(PseudoCodeParser.ReadFile, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(PseudoCodeParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WriteFile() { return GetToken(PseudoCodeParser.WriteFile, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseFile() { return GetToken(PseudoCodeParser.CloseFile, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Seek() { return GetToken(PseudoCodeParser.Seek, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GetRecord() { return GetToken(PseudoCodeParser.GetRecord, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PutRecord() { return GetToken(PseudoCodeParser.PutRecord, 0); }
		public FileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterFileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitFileStatement(this);
		}
	}

	[RuleVersion(0)]
	public FileStatementContext fileStatement() {
		FileStatementContext _localctx = new FileStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_fileStatement);
		int _la;
		try {
			State = 190;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenFile:
				EnterOuterAlt(_localctx, 1);
				{
				State = 158;
				Match(OpenFile);
				State = 159;
				expression();
				State = 160;
				Match(For);
				State = 161;
				_localctx.fileMode = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Read) | (1L << Write) | (1L << Append) | (1L << Random))) != 0)) ) {
					_localctx.fileMode = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case ReadFile:
				EnterOuterAlt(_localctx, 2);
				{
				State = 163;
				Match(ReadFile);
				State = 164;
				expression();
				State = 165;
				Match(Comma);
				State = 166;
				expression();
				}
				break;
			case WriteFile:
				EnterOuterAlt(_localctx, 3);
				{
				State = 168;
				Match(WriteFile);
				State = 169;
				expression();
				State = 170;
				Match(Comma);
				State = 171;
				expression();
				}
				break;
			case CloseFile:
				EnterOuterAlt(_localctx, 4);
				{
				State = 173;
				Match(CloseFile);
				State = 174;
				expression();
				}
				break;
			case Seek:
				EnterOuterAlt(_localctx, 5);
				{
				State = 175;
				Match(Seek);
				State = 176;
				expression();
				State = 177;
				Match(Comma);
				State = 178;
				expression();
				}
				break;
			case GetRecord:
				EnterOuterAlt(_localctx, 6);
				{
				State = 180;
				Match(GetRecord);
				State = 181;
				expression();
				State = 182;
				Match(Comma);
				State = 183;
				expression();
				}
				break;
			case PutRecord:
				EnterOuterAlt(_localctx, 7);
				{
				State = 185;
				Match(PutRecord);
				State = 186;
				expression();
				State = 187;
				Match(Comma);
				State = 188;
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement() {
			return GetRuleContext<CaseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatStatementContext repeatStatement() {
			return GetRuleContext<RepeatStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefinitionContext procedureDefinition() {
			return GetRuleContext<ProcedureDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDefinitionContext typeDefinition() {
			return GetRuleContext<TypeDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefinitionContext enumDefinition() {
			return GetRuleContext<EnumDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerDefinitionContext pointerDefinition() {
			return GetRuleContext<PointerDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefinitionContext classDefinition() {
			return GetRuleContext<ClassDefinitionContext>(0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_compoundStatement);
		try {
			State = 203;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 192;
				ifStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 193;
				caseStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 194;
				whileStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 195;
				forStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 196;
				repeatStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 197;
				procedureDefinition();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 198;
				functionDefinition();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 199;
				typeDefinition();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 200;
				enumDefinition();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 201;
				pointerDefinition();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 202;
				classDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopedExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ScopedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scopedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterScopedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitScopedExpression(this);
		}
	}

	[RuleVersion(0)]
	public ScopedExpressionContext scopedExpression() {
		ScopedExpressionContext _localctx = new ScopedExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_scopedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndentedBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(PseudoCodeParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(PseudoCodeParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IndentedBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indentedBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterIndentedBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitIndentedBlock(this);
		}
	}

	[RuleVersion(0)]
	public IndentedBlockContext indentedBlock() {
		IndentedBlockContext _localctx = new IndentedBlockContext(Context, State);
		EnterRule(_localctx, 28, RULE_indentedBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			Match(INDENT);
			State = 209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 208;
				statement();
				}
				}
				State = 211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Character) | (1L << String) | (1L << Date) | (1L << NumberSequence) | (1L << Boolean) | (1L << NL) | (1L << Declare) | (1L << Constant) | (1L << IoKeyword) | (1L << Case) | (1L << For) | (1L << While) | (1L << Repeat) | (1L << If) | (1L << Procedure) | (1L << Call) | (1L << Function) | (1L << Return) | (1L << Type) | (1L << OpenFile) | (1L << ReadFile) | (1L << WriteFile) | (1L << CloseFile) | (1L << Seek) | (1L << GetRecord) | (1L << PutRecord) | (1L << Class) | (1L << New) | (1L << Not) | (1L << OpenParen) | (1L << OpenBrack))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (Dot - 69)) | (1L << (Subtract - 69)) | (1L << (Caret - 69)) | (1L << (Identifier - 69)))) != 0) );
			State = 213;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlignedBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(PseudoCodeParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(PseudoCodeParser.DEDENT, 0); }
		public AlignedBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alignedBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterAlignedBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitAlignedBlock(this);
		}
	}

	[RuleVersion(0)]
	public AlignedBlockContext alignedBlock() {
		AlignedBlockContext _localctx = new AlignedBlockContext(Context, State);
		EnterRule(_localctx, 30, RULE_alignedBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			statement();
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDENT) {
				{
				State = 216;
				Match(INDENT);
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 217;
					statement();
					}
					}
					State = 220;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Character) | (1L << String) | (1L << Date) | (1L << NumberSequence) | (1L << Boolean) | (1L << NL) | (1L << Declare) | (1L << Constant) | (1L << IoKeyword) | (1L << Case) | (1L << For) | (1L << While) | (1L << Repeat) | (1L << If) | (1L << Procedure) | (1L << Call) | (1L << Function) | (1L << Return) | (1L << Type) | (1L << OpenFile) | (1L << ReadFile) | (1L << WriteFile) | (1L << CloseFile) | (1L << Seek) | (1L << GetRecord) | (1L << PutRecord) | (1L << Class) | (1L << New) | (1L << Not) | (1L << OpenParen) | (1L << OpenBrack))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (Dot - 69)) | (1L << (Subtract - 69)) | (1L << (Caret - 69)) | (1L << (Identifier - 69)))) != 0) );
				State = 222;
				Match(DEDENT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public bool HasElse;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(PseudoCodeParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopedExpressionContext scopedExpression() {
			return GetRuleContext<ScopedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Then() { return GetToken(PseudoCodeParser.Then, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndentedBlockContext[] indentedBlock() {
			return GetRuleContexts<IndentedBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndentedBlockContext indentedBlock(int i) {
			return GetRuleContext<IndentedBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Endif() { return GetToken(PseudoCodeParser.Endif, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(PseudoCodeParser.Else, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			Match(If);
			State = 227;
			scopedExpression();
			State = 228;
			Match(Then);
			State = 229;
			indentedBlock();
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Else) {
				{
				State = 230;
				Match(Else);
				State = 231;
				indentedBlock();
				_localctx.HasElse =  true;
				}
			}

			State = 236;
			Match(Endif);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public bool HasStep;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(PseudoCodeParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssignmentNotation() { return GetToken(PseudoCodeParser.AssignmentNotation, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode To() { return GetToken(PseudoCodeParser.To, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopedExpressionContext[] scopedExpression() {
			return GetRuleContexts<ScopedExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopedExpressionContext scopedExpression(int i) {
			return GetRuleContext<ScopedExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndentedBlockContext indentedBlock() {
			return GetRuleContext<IndentedBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Next() { return GetToken(PseudoCodeParser.Next, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Step() { return GetToken(PseudoCodeParser.Step, 0); }
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			Match(For);
			State = 239;
			expression();
			State = 240;
			Match(AssignmentNotation);
			State = 241;
			expression();
			State = 242;
			Match(To);
			State = 243;
			scopedExpression();
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Step) {
				{
				State = 244;
				Match(Step);
				State = 245;
				scopedExpression();
				_localctx.HasStep =  true;
				}
			}

			State = 250;
			indentedBlock();
			State = 251;
			Match(Next);
			State = 252;
			scopedExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(PseudoCodeParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopedExpressionContext scopedExpression() {
			return GetRuleContext<ScopedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(PseudoCodeParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndentedBlockContext indentedBlock() {
			return GetRuleContext<IndentedBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Endwhile() { return GetToken(PseudoCodeParser.Endwhile, 0); }
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			Match(While);
			State = 255;
			scopedExpression();
			State = 256;
			Match(Do);
			State = 257;
			indentedBlock();
			State = 258;
			Match(Endwhile);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Repeat() { return GetToken(PseudoCodeParser.Repeat, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndentedBlockContext indentedBlock() {
			return GetRuleContext<IndentedBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(PseudoCodeParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopedExpressionContext scopedExpression() {
			return GetRuleContext<ScopedExpressionContext>(0);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterRepeatStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitRepeatStatement(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementContext repeatStatement() {
		RepeatStatementContext _localctx = new RepeatStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_repeatStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			Match(Repeat);
			State = 261;
			indentedBlock();
			State = 262;
			Match(Until);
			State = 263;
			scopedExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(PseudoCodeParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Of() { return GetToken(PseudoCodeParser.Of, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseBodyContext caseBody() {
			return GetRuleContext<CaseBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Endcase() { return GetToken(PseudoCodeParser.Endcase, 0); }
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_caseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			Match(Case);
			State = 266;
			expression();
			State = 267;
			Match(Of);
			State = 268;
			caseBody();
			State = 269;
			Match(Endcase);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBranchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(PseudoCodeParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AlignedBlockContext alignedBlock() {
			return GetRuleContext<AlignedBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Otherwise() { return GetToken(PseudoCodeParser.Otherwise, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopedExpressionContext scopedExpression() {
			return GetRuleContext<ScopedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueRangeContext valueRange() {
			return GetRuleContext<ValueRangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(PseudoCodeParser.NL, 0); }
		public CaseBranchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBranch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterCaseBranch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitCaseBranch(this);
		}
	}

	[RuleVersion(0)]
	public CaseBranchContext caseBranch() {
		CaseBranchContext _localctx = new CaseBranchContext(Context, State);
		EnterRule(_localctx, 42, RULE_caseBranch);
		try {
			State = 279;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Character:
			case String:
			case Date:
			case NumberSequence:
			case Boolean:
			case Otherwise:
			case New:
			case Not:
			case OpenParen:
			case OpenBrack:
			case Dot:
			case Subtract:
			case Caret:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 274;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 271;
					Match(Otherwise);
					}
					break;
				case 2:
					{
					State = 272;
					scopedExpression();
					}
					break;
				case 3:
					{
					State = 273;
					valueRange();
					}
					break;
				}
				State = 276;
				Match(Colon);
				State = 277;
				alignedBlock();
				}
				break;
			case NL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 278;
				Match(NL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(PseudoCodeParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(PseudoCodeParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseBranchContext[] caseBranch() {
			return GetRuleContexts<CaseBranchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseBranchContext caseBranch(int i) {
			return GetRuleContext<CaseBranchContext>(i);
		}
		public CaseBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterCaseBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitCaseBody(this);
		}
	}

	[RuleVersion(0)]
	public CaseBodyContext caseBody() {
		CaseBodyContext _localctx = new CaseBodyContext(Context, State);
		EnterRule(_localctx, 44, RULE_caseBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			Match(INDENT);
			State = 283;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 282;
				caseBranch();
				}
				}
				State = 285;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Character) | (1L << String) | (1L << Date) | (1L << NumberSequence) | (1L << Boolean) | (1L << NL) | (1L << Otherwise) | (1L << New) | (1L << Not) | (1L << OpenParen) | (1L << OpenBrack))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (Dot - 69)) | (1L << (Subtract - 69)) | (1L << (Caret - 69)) | (1L << (Identifier - 69)))) != 0) );
			State = 287;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueRangeContext : ParserRuleContext {
		public ScopedExpressionContext from;
		public ScopedExpressionContext to;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode To() { return GetToken(PseudoCodeParser.To, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopedExpressionContext[] scopedExpression() {
			return GetRuleContexts<ScopedExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopedExpressionContext scopedExpression(int i) {
			return GetRuleContext<ScopedExpressionContext>(i);
		}
		public ValueRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterValueRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitValueRange(this);
		}
	}

	[RuleVersion(0)]
	public ValueRangeContext valueRange() {
		ValueRangeContext _localctx = new ValueRangeContext(Context, State);
		EnterRule(_localctx, 46, RULE_valueRange);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			_localctx.from = scopedExpression();
			State = 290;
			Match(To);
			State = 291;
			_localctx.to = scopedExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Procedure() { return GetToken(PseudoCodeParser.Procedure, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierWithNewContext identifierWithNew() {
			return GetRuleContext<IdentifierWithNewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndentedBlockContext indentedBlock() {
			return GetRuleContext<IndentedBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Endprocedure() { return GetToken(PseudoCodeParser.Endprocedure, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsDeclarationContext argumentsDeclaration() {
			return GetRuleContext<ArgumentsDeclarationContext>(0);
		}
		public ProcedureDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterProcedureDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitProcedureDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureDefinitionContext procedureDefinition() {
		ProcedureDefinitionContext _localctx = new ProcedureDefinitionContext(Context, State);
		EnterRule(_localctx, 48, RULE_procedureDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			Match(Procedure);
			State = 294;
			identifierWithNew();
			State = 296;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpenParen) {
				{
				State = 295;
				argumentsDeclaration();
				}
			}

			State = 298;
			indentedBlock();
			State = 299;
			Match(Endprocedure);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function() { return GetToken(PseudoCodeParser.Function, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PseudoCodeParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Returns() { return GetToken(PseudoCodeParser.Returns, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndentedBlockContext indentedBlock() {
			return GetRuleContext<IndentedBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Endfunction() { return GetToken(PseudoCodeParser.Endfunction, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsDeclarationContext argumentsDeclaration() {
			return GetRuleContext<ArgumentsDeclarationContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterFunctionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitFunctionDefinition(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 50, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			Match(Function);
			State = 302;
			Match(Identifier);
			State = 304;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpenParen) {
				{
				State = 303;
				argumentsDeclaration();
				}
			}

			State = 306;
			Match(Returns);
			State = 307;
			dataType();
			State = 308;
			indentedBlock();
			State = 309;
			Match(Endfunction);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(PseudoCodeParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(PseudoCodeParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentDeclarationContext[] argumentDeclaration() {
			return GetRuleContexts<ArgumentDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentDeclarationContext argumentDeclaration(int i) {
			return GetRuleContext<ArgumentDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(PseudoCodeParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(PseudoCodeParser.Comma, i);
		}
		public ArgumentsDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentsDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterArgumentsDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitArgumentsDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsDeclarationContext argumentsDeclaration() {
		ArgumentsDeclarationContext _localctx = new ArgumentsDeclarationContext(Context, State);
		EnterRule(_localctx, 52, RULE_argumentsDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			Match(OpenParen);
			State = 320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 35)) & ~0x3f) == 0 && ((1L << (_la - 35)) & ((1L << (Byval - 35)) | (1L << (Byref - 35)) | (1L << (Identifier - 35)))) != 0)) {
				{
				State = 312;
				argumentDeclaration();
				State = 317;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 313;
					Match(Comma);
					State = 314;
					argumentDeclaration();
					}
					}
					State = 319;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 322;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PseudoCodeParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(PseudoCodeParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Byval() { return GetToken(PseudoCodeParser.Byval, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Byref() { return GetToken(PseudoCodeParser.Byref, 0); }
		public ArgumentDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterArgumentDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitArgumentDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentDeclarationContext argumentDeclaration() {
		ArgumentDeclarationContext _localctx = new ArgumentDeclarationContext(Context, State);
		EnterRule(_localctx, 54, RULE_argumentDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Byval || _la==Byref) {
				{
				State = 324;
				_la = TokenStream.LA(1);
				if ( !(_la==Byval || _la==Byref) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 327;
			Match(Identifier);
			State = 328;
			Match(Colon);
			State = 329;
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(PseudoCodeParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(PseudoCodeParser.Comma, i);
		}
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 56, RULE_tuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			expression();
			State = 336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 332;
				Match(Comma);
				State = 333;
				expression();
				}
				}
				State = 338;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type() { return GetToken(PseudoCodeParser.Type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(PseudoCodeParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(PseudoCodeParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(PseudoCodeParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(PseudoCodeParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(PseudoCodeParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(PseudoCodeParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(PseudoCodeParser.Comma, i);
		}
		public EnumDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterEnumDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitEnumDefinition(this);
		}
	}

	[RuleVersion(0)]
	public EnumDefinitionContext enumDefinition() {
		EnumDefinitionContext _localctx = new EnumDefinitionContext(Context, State);
		EnterRule(_localctx, 58, RULE_enumDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339;
			Match(Type);
			State = 340;
			Match(Identifier);
			State = 341;
			Match(Equal);
			State = 342;
			Match(OpenParen);
			State = 343;
			Match(Identifier);
			State = 348;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 344;
				Match(Comma);
				State = 345;
				Match(Identifier);
				}
				}
				State = 350;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 351;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type() { return GetToken(PseudoCodeParser.Type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PseudoCodeParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(PseudoCodeParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret() { return GetToken(PseudoCodeParser.Caret, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public PointerDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterPointerDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitPointerDefinition(this);
		}
	}

	[RuleVersion(0)]
	public PointerDefinitionContext pointerDefinition() {
		PointerDefinitionContext _localctx = new PointerDefinitionContext(Context, State);
		EnterRule(_localctx, 60, RULE_pointerDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353;
			Match(Type);
			State = 354;
			Match(Identifier);
			State = 355;
			Match(Equal);
			State = 356;
			Match(Caret);
			State = 357;
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type() { return GetToken(PseudoCodeParser.Type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PseudoCodeParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeBodyContext typeBody() {
			return GetRuleContext<TypeBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Endtype() { return GetToken(PseudoCodeParser.Endtype, 0); }
		public TypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterTypeDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitTypeDefinition(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefinitionContext typeDefinition() {
		TypeDefinitionContext _localctx = new TypeDefinitionContext(Context, State);
		EnterRule(_localctx, 62, RULE_typeDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359;
			Match(Type);
			State = 360;
			Match(Identifier);
			State = 361;
			typeBody();
			State = 362;
			Match(Endtype);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(PseudoCodeParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(PseudoCodeParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeChildContext[] typeChild() {
			return GetRuleContexts<TypeChildContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeChildContext typeChild(int i) {
			return GetRuleContext<TypeChildContext>(i);
		}
		public TypeBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterTypeBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitTypeBody(this);
		}
	}

	[RuleVersion(0)]
	public TypeBodyContext typeBody() {
		TypeBodyContext _localctx = new TypeBodyContext(Context, State);
		EnterRule(_localctx, 64, RULE_typeBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			Match(INDENT);
			State = 366;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 365;
				typeChild();
				}
				}
				State = 368;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NL || _la==Declare );
			State = 370;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeChildContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationStatementContext declarationStatement() {
			return GetRuleContext<DeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(PseudoCodeParser.NL, 0); }
		public TypeChildContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeChild; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterTypeChild(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitTypeChild(this);
		}
	}

	[RuleVersion(0)]
	public TypeChildContext typeChild() {
		TypeChildContext _localctx = new TypeChildContext(Context, State);
		EnterRule(_localctx, 66, RULE_typeChild);
		try {
			State = 374;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Declare:
				EnterOuterAlt(_localctx, 1);
				{
				State = 372;
				declarationStatement();
				}
				break;
			case NL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 373;
				Match(NL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefinitionContext : ParserRuleContext {
		public IToken className;
		public IToken inheritClass;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(PseudoCodeParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Endclass() { return GetToken(PseudoCodeParser.Endclass, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(PseudoCodeParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(PseudoCodeParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inherits() { return GetToken(PseudoCodeParser.Inherits, 0); }
		public ClassDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterClassDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitClassDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefinitionContext classDefinition() {
		ClassDefinitionContext _localctx = new ClassDefinitionContext(Context, State);
		EnterRule(_localctx, 68, RULE_classDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			Match(Class);
			State = 377;
			_localctx.className = Match(Identifier);
			State = 380;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Inherits) {
				{
				State = 378;
				Match(Inherits);
				State = 379;
				_localctx.inheritClass = Match(Identifier);
				}
			}

			State = 382;
			classBody();
			State = 383;
			Match(Endclass);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(PseudoCodeParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(PseudoCodeParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassDataMemberContext[] classDataMember() {
			return GetRuleContexts<ClassDataMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDataMemberContext classDataMember(int i) {
			return GetRuleContext<ClassDataMemberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassMethodContext[] classMethod() {
			return GetRuleContexts<ClassMethodContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassMethodContext classMethod(int i) {
			return GetRuleContext<ClassMethodContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatementContext[] assignmentStatement() {
			return GetRuleContexts<AssignmentStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatementContext assignmentStatement(int i) {
			return GetRuleContext<AssignmentStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(PseudoCodeParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(PseudoCodeParser.NL, i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 70, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			Match(INDENT);
			State = 390;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 390;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
				case 1:
					{
					State = 386;
					classDataMember();
					}
					break;
				case 2:
					{
					State = 387;
					classMethod();
					}
					break;
				case 3:
					{
					State = 388;
					assignmentStatement();
					}
					break;
				case 4:
					{
					State = 389;
					Match(NL);
					}
					break;
				}
				}
				State = 392;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Character) | (1L << String) | (1L << Date) | (1L << NumberSequence) | (1L << Boolean) | (1L << NL) | (1L << Procedure) | (1L << Function) | (1L << Private) | (1L << Public) | (1L << New) | (1L << Not) | (1L << OpenParen) | (1L << OpenBrack))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (Dot - 69)) | (1L << (Subtract - 69)) | (1L << (Caret - 69)) | (1L << (Identifier - 69)))) != 0) );
			State = 394;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDataMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PseudoCodeParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(PseudoCodeParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessLevelContext accessLevel() {
			return GetRuleContext<AccessLevelContext>(0);
		}
		public ClassDataMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDataMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterClassDataMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitClassDataMember(this);
		}
	}

	[RuleVersion(0)]
	public ClassDataMemberContext classDataMember() {
		ClassDataMemberContext _localctx = new ClassDataMemberContext(Context, State);
		EnterRule(_localctx, 72, RULE_classDataMember);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Private || _la==Public) {
				{
				State = 396;
				accessLevel();
				}
			}

			State = 399;
			Match(Identifier);
			State = 400;
			Match(Colon);
			State = 401;
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMethodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefinitionContext procedureDefinition() {
			return GetRuleContext<ProcedureDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessLevelContext accessLevel() {
			return GetRuleContext<AccessLevelContext>(0);
		}
		public ClassMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMethod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterClassMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitClassMethod(this);
		}
	}

	[RuleVersion(0)]
	public ClassMethodContext classMethod() {
		ClassMethodContext _localctx = new ClassMethodContext(Context, State);
		EnterRule(_localctx, 74, RULE_classMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Private || _la==Public) {
				{
				State = 403;
				accessLevel();
				}
			}

			State = 408;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Procedure:
				{
				State = 406;
				procedureDefinition();
				}
				break;
			case Function:
				{
				State = 407;
				functionDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessLevelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Public() { return GetToken(PseudoCodeParser.Public, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Private() { return GetToken(PseudoCodeParser.Private, 0); }
		public AccessLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessLevel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterAccessLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitAccessLevel(this);
		}
	}

	[RuleVersion(0)]
	public AccessLevelContext accessLevel() {
		AccessLevelContext _localctx = new AccessLevelContext(Context, State);
		EnterRule(_localctx, 76, RULE_accessLevel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			_la = TokenStream.LA(1);
			if ( !(_la==Private || _la==Public) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicExpressionContext logicExpression() {
			return GetRuleContext<LogicExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 78, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			logicExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicExpressionContext : ParserRuleContext {
		public bool IsUnary;
		public IToken op;
		public ComparisonOpContext comp;
		[System.Diagnostics.DebuggerNonUserCode] public LogicExpressionContext[] logicExpression() {
			return GetRuleContexts<LogicExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicExpressionContext logicExpression(int i) {
			return GetRuleContext<LogicExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(PseudoCodeParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExpressionContext arithmeticExpression() {
			return GetRuleContext<ArithmeticExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(PseudoCodeParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(PseudoCodeParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOpContext comparisonOp() {
			return GetRuleContext<ComparisonOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(PseudoCodeParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(PseudoCodeParser.Or, 0); }
		public LogicExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterLogicExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitLogicExpression(this);
		}
	}

	[RuleVersion(0)]
	public LogicExpressionContext logicExpression() {
		return logicExpression(0);
	}

	private LogicExpressionContext logicExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicExpressionContext _localctx = new LogicExpressionContext(Context, _parentState);
		LogicExpressionContext _prevctx = _localctx;
		int _startState = 80;
		EnterRecursionRule(_localctx, 80, RULE_logicExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 427;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 415;
				_localctx.op = Match(Not);
				State = 416;
				logicExpression(5);
				_localctx.IsUnary =  true;
				}
				break;
			case 2:
				{
				State = 419;
				arithmeticExpression(0);
				_localctx.IsUnary =  true;
				}
				break;
			case 3:
				{
				State = 422;
				Match(OpenParen);
				State = 423;
				logicExpression(0);
				State = 424;
				Match(CloseParen);
				_localctx.IsUnary =  true;
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 441;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 439;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
					case 1:
						{
						_localctx = new LogicExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logicExpression);
						State = 429;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 430;
						_localctx.comp = comparisonOp();
						State = 431;
						logicExpression(7);
						}
						break;
					case 2:
						{
						_localctx = new LogicExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logicExpression);
						State = 433;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 434;
						_localctx.op = Match(And);
						State = 435;
						logicExpression(5);
						}
						break;
					case 3:
						{
						_localctx = new LogicExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logicExpression);
						State = 436;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 437;
						_localctx.op = Match(Or);
						State = 438;
						logicExpression(4);
						}
						break;
					}
					} 
				}
				State = 443;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ComparisonOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Smaller() { return GetToken(PseudoCodeParser.Smaller, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(PseudoCodeParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(PseudoCodeParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterEqual() { return GetToken(PseudoCodeParser.GreaterEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SmallerEqual() { return GetToken(PseudoCodeParser.SmallerEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEqual() { return GetToken(PseudoCodeParser.NotEqual, 0); }
		public ComparisonOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterComparisonOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitComparisonOp(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOpContext comparisonOp() {
		ComparisonOpContext _localctx = new ComparisonOpContext(Context, State);
		EnterRule(_localctx, 82, RULE_comparisonOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (Equal - 79)) | (1L << (Greater - 79)) | (1L << (Smaller - 79)) | (1L << (GreaterEqual - 79)) | (1L << (SmallerEqual - 79)) | (1L << (NotEqual - 79)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticExpressionContext : ParserRuleContext {
		public bool IsUnary;
		public ArithmeticExpressionContext operand;
		public ArithmeticExpressionContext operand1;
		public IToken op;
		public ArithmeticExpressionContext operand2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(PseudoCodeParser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PseudoCodeParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret() { return GetToken(PseudoCodeParser.Caret, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExpressionContext[] arithmeticExpression() {
			return GetRuleContexts<ArithmeticExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExpressionContext arithmeticExpression(int i) {
			return GetRuleContext<ArithmeticExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Subtract() { return GetToken(PseudoCodeParser.Subtract, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(PseudoCodeParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(PseudoCodeParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pow() { return GetToken(PseudoCodeParser.Pow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(PseudoCodeParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntDivide() { return GetToken(PseudoCodeParser.IntDivide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(PseudoCodeParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod() { return GetToken(PseudoCodeParser.Mod, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Add() { return GetToken(PseudoCodeParser.Add, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(PseudoCodeParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(PseudoCodeParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ArithmeticExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterArithmeticExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitArithmeticExpression(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticExpressionContext arithmeticExpression() {
		return arithmeticExpression(0);
	}

	private ArithmeticExpressionContext arithmeticExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArithmeticExpressionContext _localctx = new ArithmeticExpressionContext(Context, _parentState);
		ArithmeticExpressionContext _prevctx = _localctx;
		int _startState = 84;
		EnterRecursionRule(_localctx, 84, RULE_arithmeticExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 468;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 447;
				Match(New);
				State = 448;
				Match(Identifier);
				State = 449;
				arguments();
				}
				break;
			case 2:
				{
				State = 450;
				Match(Identifier);
				_localctx.IsUnary =  true;
				}
				break;
			case 3:
				{
				State = 452;
				atom();
				_localctx.IsUnary =  true;
				}
				break;
			case 4:
				{
				State = 455;
				_localctx.op = Match(Caret);
				State = 456;
				_localctx.operand = arithmeticExpression(12);
				_localctx.IsUnary =  true;
				}
				break;
			case 5:
				{
				State = 459;
				_localctx.op = Match(Subtract);
				State = 460;
				_localctx.operand = arithmeticExpression(9);
				_localctx.IsUnary =  true;
				}
				break;
			case 6:
				{
				State = 463;
				Match(OpenParen);
				State = 464;
				arithmeticExpression(0);
				State = 465;
				Match(CloseParen);
				_localctx.IsUnary =  true;
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 506;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 504;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
					case 1:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						_localctx.operand1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 470;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 471;
						_localctx.op = Match(Pow);
						State = 472;
						_localctx.operand2 = arithmeticExpression(10);
						}
						break;
					case 2:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						_localctx.operand1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 473;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 474;
						_localctx.op = Match(Divide);
						State = 475;
						_localctx.operand2 = arithmeticExpression(9);
						}
						break;
					case 3:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						_localctx.operand1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 476;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 477;
						_localctx.op = Match(IntDivide);
						State = 478;
						_localctx.operand2 = arithmeticExpression(8);
						}
						break;
					case 4:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						_localctx.operand1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 479;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 480;
						_localctx.op = Match(Multiply);
						State = 481;
						_localctx.operand2 = arithmeticExpression(7);
						}
						break;
					case 5:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						_localctx.operand1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 482;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 483;
						_localctx.op = Match(Mod);
						State = 484;
						_localctx.operand2 = arithmeticExpression(6);
						}
						break;
					case 6:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						_localctx.operand1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 485;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 486;
						_localctx.op = Match(Subtract);
						State = 487;
						_localctx.operand2 = arithmeticExpression(5);
						}
						break;
					case 7:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						_localctx.operand1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 488;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 489;
						_localctx.op = Match(Add);
						State = 490;
						_localctx.operand2 = arithmeticExpression(4);
						}
						break;
					case 8:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						_localctx.operand1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 491;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 492;
						_localctx.op = Match(BitAnd);
						State = 493;
						_localctx.operand2 = arithmeticExpression(3);
						}
						break;
					case 9:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 494;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 495;
						Match(Dot);
						State = 496;
						Match(Identifier);
						}
						break;
					case 10:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 497;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 498;
						array();
						}
						break;
					case 11:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 499;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 500;
						arguments();
						}
						break;
					case 12:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						_localctx.operand = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 501;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 502;
						_localctx.op = Match(Caret);
						_localctx.IsUnary =  true;
						}
						break;
					}
					} 
				}
				State = 508;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(PseudoCodeParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(PseudoCodeParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 86, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 509;
			Match(OpenParen);
			State = 511;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Character) | (1L << String) | (1L << Date) | (1L << NumberSequence) | (1L << Boolean) | (1L << New) | (1L << Not) | (1L << OpenParen) | (1L << OpenBrack))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (Dot - 69)) | (1L << (Subtract - 69)) | (1L << (Caret - 69)) | (1L << (Identifier - 69)))) != 0)) {
				{
				State = 510;
				tuple();
				}
			}

			State = 513;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public string AtomType;
		public object Value;
		public IToken _String;
		public IToken _Character;
		public IToken _Boolean;
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(PseudoCodeParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Character() { return GetToken(PseudoCodeParser.Character, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Boolean() { return GetToken(PseudoCodeParser.Boolean, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Date() { return GetToken(PseudoCodeParser.Date, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 88, RULE_atom);
		try {
			State = 527;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NumberSequence:
			case Dot:
			case Subtract:
				EnterOuterAlt(_localctx, 1);
				{
				State = 515;
				number();
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 516;
				_localctx._String = Match(String);

				    _localctx.AtomType =  "STRING";
				    var str = System.Text.RegularExpressions.Regex.Unescape((_localctx._String!=null?_localctx._String.Text:null));
				    _localctx.Value =  str.Substring(1, str.Length - 2);
				 
				}
				break;
			case Character:
				EnterOuterAlt(_localctx, 3);
				{
				State = 518;
				_localctx._Character = Match(Character);

				    _localctx.AtomType =  "CHAR";
				    var str = System.Text.RegularExpressions.Regex.Unescape((_localctx._Character!=null?_localctx._Character.Text:null));
				    _localctx.Value =  str[1];
				 
				}
				break;
			case Boolean:
				EnterOuterAlt(_localctx, 4);
				{
				State = 520;
				_localctx._Boolean = Match(Boolean);
				_localctx.AtomType =  "BOOLEAN"; _localctx.Value =  bool.Parse((_localctx._Boolean!=null?_localctx._Boolean.Text:null));
				}
				break;
			case Date:
				EnterOuterAlt(_localctx, 5);
				{
				State = 522;
				Match(Date);
				_localctx.AtomType =  "DATE";
				}
				break;
			case OpenBrack:
				EnterOuterAlt(_localctx, 6);
				{
				State = 524;
				array();
				_localctx.AtomType =  "ARRAY";
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeContext : ParserRuleContext {
		public string TypeName;
		public bool IsArray;
		public List<Range> Dimensions = new();
		public BasicDataTypeContext _basicDataType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Array() { return GetToken(PseudoCodeParser.Array, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrack() { return GetToken(PseudoCodeParser.OpenBrack, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayRangeContext[] arrayRange() {
			return GetRuleContexts<ArrayRangeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayRangeContext arrayRange(int i) {
			return GetRuleContext<ArrayRangeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrack() { return GetToken(PseudoCodeParser.CloseBrack, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Of() { return GetToken(PseudoCodeParser.Of, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasicDataTypeContext basicDataType() {
			return GetRuleContext<BasicDataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(PseudoCodeParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(PseudoCodeParser.Comma, i);
		}
		public DataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitDataType(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeContext dataType() {
		DataTypeContext _localctx = new DataTypeContext(Context, State);
		EnterRule(_localctx, 90, RULE_dataType);
		int _la;
		try {
			State = 547;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Array:
				EnterOuterAlt(_localctx, 1);
				{
				State = 529;
				Match(Array);
				State = 530;
				Match(OpenBrack);
				State = 531;
				arrayRange();
				State = 536;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 532;
					Match(Comma);
					State = 533;
					arrayRange();
					}
					}
					State = 538;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 539;
				Match(CloseBrack);
				State = 540;
				Match(Of);
				State = 541;
				_localctx._basicDataType = basicDataType();

				    _localctx.IsArray =  true;
				    _localctx.TypeName =  (_localctx._basicDataType!=null?TokenStream.GetText(_localctx._basicDataType.Start,_localctx._basicDataType.Stop):null);
				 
				}
				break;
			case Typename:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 544;
				_localctx._basicDataType = basicDataType();
				_localctx.TypeName =  (_localctx._basicDataType!=null?TokenStream.GetText(_localctx._basicDataType.Start,_localctx._basicDataType.Stop):null);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicDataTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typename() { return GetToken(PseudoCodeParser.Typename, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PseudoCodeParser.Identifier, 0); }
		public BasicDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicDataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterBasicDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitBasicDataType(this);
		}
	}

	[RuleVersion(0)]
	public BasicDataTypeContext basicDataType() {
		BasicDataTypeContext _localctx = new BasicDataTypeContext(Context, State);
		EnterRule(_localctx, 92, RULE_basicDataType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549;
			_la = TokenStream.LA(1);
			if ( !(_la==Typename || _la==Identifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayRangeContext : ParserRuleContext {
		public ExpressionContext s;
		public ExpressionContext e;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(PseudoCodeParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterArrayRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitArrayRange(this);
		}
	}

	[RuleVersion(0)]
	public ArrayRangeContext arrayRange() {
		ArrayRangeContext _localctx = new ArrayRangeContext(Context, State);
		EnterRule(_localctx, 94, RULE_arrayRange);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551;
			_localctx.s = expression();
			State = 552;
			Match(Colon);
			State = 553;
			_localctx.e = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrack() { return GetToken(PseudoCodeParser.OpenBrack, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrack() { return GetToken(PseudoCodeParser.CloseBrack, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(PseudoCodeParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(PseudoCodeParser.Comma, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 96, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 555;
			Match(OpenBrack);
			State = 556;
			expression();
			State = 561;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 557;
				Match(Comma);
				State = 558;
				expression();
				}
				}
				State = 563;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 564;
			Match(CloseBrack);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public IntegerContext _integer;
		public DecimalContext _decimal;
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalContext @decimal() {
			return GetRuleContext<DecimalContext>(0);
		}
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 98, RULE_number);
		try {
			State = 572;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 566;
				_localctx._integer = integer();
				((AtomContext)GetInvokingContext(44)).AtomType =  "INTEGER"; ((AtomContext)GetInvokingContext(44)).Value =  int.Parse((_localctx._integer!=null?TokenStream.GetText(_localctx._integer.Start,_localctx._integer.Stop):null));
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 569;
				_localctx._decimal = @decimal();
				((AtomContext)GetInvokingContext(44)).AtomType =  "REAL"; ((AtomContext)GetInvokingContext(44)).Value =  decimal.Parse((_localctx._decimal!=null?TokenStream.GetText(_localctx._decimal.Start,_localctx._decimal.Stop):null));
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(PseudoCodeParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NumberSequence() { return GetTokens(PseudoCodeParser.NumberSequence); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberSequence(int i) {
			return GetToken(PseudoCodeParser.NumberSequence, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Subtract() { return GetToken(PseudoCodeParser.Subtract, 0); }
		public DecimalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterDecimal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitDecimal(this);
		}
	}

	[RuleVersion(0)]
	public DecimalContext @decimal() {
		DecimalContext _localctx = new DecimalContext(Context, State);
		EnterRule(_localctx, 100, RULE_decimal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 575;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Subtract) {
				{
				State = 574;
				Match(Subtract);
				}
			}

			State = 587;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 578;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NumberSequence) {
					{
					State = 577;
					Match(NumberSequence);
					}
				}

				State = 580;
				Match(Dot);
				State = 581;
				Match(NumberSequence);
				}
				break;
			case 2:
				{
				State = 582;
				Match(NumberSequence);
				State = 583;
				Match(Dot);
				State = 585;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
				case 1:
					{
					State = 584;
					Match(NumberSequence);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberSequence() { return GetToken(PseudoCodeParser.NumberSequence, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Subtract() { return GetToken(PseudoCodeParser.Subtract, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitInteger(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 102, RULE_integer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 590;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Subtract) {
				{
				State = 589;
				Match(Subtract);
				}
			}

			State = 592;
			Match(NumberSequence);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierWithNewContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PseudoCodeParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(PseudoCodeParser.New, 0); }
		public IdentifierWithNewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierWithNew; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterIdentifierWithNew(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitIdentifierWithNew(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierWithNewContext identifierWithNew() {
		IdentifierWithNewContext _localctx = new IdentifierWithNewContext(Context, State);
		EnterRule(_localctx, 104, RULE_identifierWithNew);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 594;
			_la = TokenStream.LA(1);
			if ( !(_la==New || _la==Identifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 40: return logicExpression_sempred((LogicExpressionContext)_localctx, predIndex);
		case 42: return arithmeticExpression_sempred((ArithmeticExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool logicExpression_sempred(LogicExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		}
		return true;
	}
	private bool arithmeticExpression_sempred(ArithmeticExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 10);
		case 4: return Precpred(Context, 8);
		case 5: return Precpred(Context, 7);
		case 6: return Precpred(Context, 6);
		case 7: return Precpred(Context, 5);
		case 8: return Precpred(Context, 4);
		case 9: return Precpred(Context, 3);
		case 10: return Precpred(Context, 2);
		case 11: return Precpred(Context, 15);
		case 12: return Precpred(Context, 14);
		case 13: return Precpred(Context, 13);
		case 14: return Precpred(Context, 11);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,90,597,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,1,0,5,0,108,8,0,10,0,12,0,111,9,0,1,0,1,
		0,1,1,1,1,1,1,1,2,1,2,3,2,120,8,2,1,2,3,2,123,8,2,1,3,1,3,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,3,4,134,8,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,
		7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,
		11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
		11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
		11,3,11,191,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		3,12,204,8,12,1,13,1,13,1,14,1,14,4,14,210,8,14,11,14,12,14,211,1,14,1,
		14,1,15,1,15,1,15,4,15,219,8,15,11,15,12,15,220,1,15,1,15,3,15,225,8,15,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,235,8,16,1,16,1,16,1,17,1,
		17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,249,8,17,1,17,1,17,1,17,
		1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,
		1,20,1,20,1,20,1,20,1,21,1,21,1,21,3,21,275,8,21,1,21,1,21,1,21,3,21,280,
		8,21,1,22,1,22,4,22,284,8,22,11,22,12,22,285,1,22,1,22,1,23,1,23,1,23,
		1,23,1,24,1,24,1,24,3,24,297,8,24,1,24,1,24,1,24,1,25,1,25,1,25,3,25,305,
		8,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,5,26,316,8,26,10,26,
		12,26,319,9,26,3,26,321,8,26,1,26,1,26,1,27,3,27,326,8,27,1,27,1,27,1,
		27,1,27,1,28,1,28,1,28,5,28,335,8,28,10,28,12,28,338,9,28,1,29,1,29,1,
		29,1,29,1,29,1,29,1,29,5,29,347,8,29,10,29,12,29,350,9,29,1,29,1,29,1,
		30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,4,32,367,
		8,32,11,32,12,32,368,1,32,1,32,1,33,1,33,3,33,375,8,33,1,34,1,34,1,34,
		1,34,3,34,381,8,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,4,35,391,8,
		35,11,35,12,35,392,1,35,1,35,1,36,3,36,398,8,36,1,36,1,36,1,36,1,36,1,
		37,3,37,405,8,37,1,37,1,37,3,37,409,8,37,1,38,1,38,1,39,1,39,1,40,1,40,
		1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,428,8,40,1,
		40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,5,40,440,8,40,10,40,12,
		40,443,9,40,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
		1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,469,8,
		42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,
		42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,
		42,1,42,1,42,1,42,1,42,1,42,1,42,5,42,505,8,42,10,42,12,42,508,9,42,1,
		43,1,43,3,43,512,8,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
		1,44,1,44,1,44,1,44,3,44,528,8,44,1,45,1,45,1,45,1,45,1,45,5,45,535,8,
		45,10,45,12,45,538,9,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,548,
		8,45,1,46,1,46,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,5,48,560,8,48,10,
		48,12,48,563,9,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,3,49,573,8,49,
		1,50,3,50,576,8,50,1,50,3,50,579,8,50,1,50,1,50,1,50,1,50,1,50,3,50,586,
		8,50,3,50,588,8,50,1,51,3,51,591,8,51,1,51,1,51,1,52,1,52,1,52,0,2,80,
		84,53,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
		46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
		94,96,98,100,102,104,0,6,1,0,48,51,1,0,35,36,1,0,55,56,1,0,79,84,2,0,11,
		11,86,86,2,0,57,57,86,86,631,0,109,1,0,0,0,2,114,1,0,0,0,4,122,1,0,0,0,
		6,124,1,0,0,0,8,133,1,0,0,0,10,135,1,0,0,0,12,139,1,0,0,0,14,144,1,0,0,
		0,16,149,1,0,0,0,18,152,1,0,0,0,20,155,1,0,0,0,22,190,1,0,0,0,24,203,1,
		0,0,0,26,205,1,0,0,0,28,207,1,0,0,0,30,215,1,0,0,0,32,226,1,0,0,0,34,238,
		1,0,0,0,36,254,1,0,0,0,38,260,1,0,0,0,40,265,1,0,0,0,42,279,1,0,0,0,44,
		281,1,0,0,0,46,289,1,0,0,0,48,293,1,0,0,0,50,301,1,0,0,0,52,311,1,0,0,
		0,54,325,1,0,0,0,56,331,1,0,0,0,58,339,1,0,0,0,60,353,1,0,0,0,62,359,1,
		0,0,0,64,364,1,0,0,0,66,374,1,0,0,0,68,376,1,0,0,0,70,385,1,0,0,0,72,397,
		1,0,0,0,74,404,1,0,0,0,76,410,1,0,0,0,78,412,1,0,0,0,80,427,1,0,0,0,82,
		444,1,0,0,0,84,468,1,0,0,0,86,509,1,0,0,0,88,527,1,0,0,0,90,547,1,0,0,
		0,92,549,1,0,0,0,94,551,1,0,0,0,96,555,1,0,0,0,98,572,1,0,0,0,100,575,
		1,0,0,0,102,590,1,0,0,0,104,594,1,0,0,0,106,108,3,4,2,0,107,106,1,0,0,
		0,108,111,1,0,0,0,109,107,1,0,0,0,109,110,1,0,0,0,110,112,1,0,0,0,111,
		109,1,0,0,0,112,113,5,0,0,1,113,1,1,0,0,0,114,115,3,4,2,0,115,116,5,6,
		0,0,116,3,1,0,0,0,117,120,3,6,3,0,118,120,3,24,12,0,119,117,1,0,0,0,119,
		118,1,0,0,0,120,123,1,0,0,0,121,123,5,6,0,0,122,119,1,0,0,0,122,121,1,
		0,0,0,123,5,1,0,0,0,124,125,3,8,4,0,125,7,1,0,0,0,126,134,3,10,5,0,127,
		134,3,12,6,0,128,134,3,14,7,0,129,134,3,16,8,0,130,134,3,22,11,0,131,134,
		3,18,9,0,132,134,3,20,10,0,133,126,1,0,0,0,133,127,1,0,0,0,133,128,1,0,
		0,0,133,129,1,0,0,0,133,130,1,0,0,0,133,131,1,0,0,0,133,132,1,0,0,0,134,
		9,1,0,0,0,135,136,3,78,39,0,136,137,5,85,0,0,137,138,3,78,39,0,138,11,
		1,0,0,0,139,140,5,8,0,0,140,141,5,86,0,0,141,142,5,67,0,0,142,143,3,90,
		45,0,143,13,1,0,0,0,144,145,5,9,0,0,145,146,5,86,0,0,146,147,5,79,0,0,
		147,148,3,78,39,0,148,15,1,0,0,0,149,150,5,10,0,0,150,151,3,56,28,0,151,
		17,1,0,0,0,152,153,5,38,0,0,153,154,3,78,39,0,154,19,1,0,0,0,155,156,5,
		32,0,0,156,157,3,78,39,0,157,21,1,0,0,0,158,159,5,41,0,0,159,160,3,78,
		39,0,160,161,5,17,0,0,161,162,7,0,0,0,162,191,1,0,0,0,163,164,5,42,0,0,
		164,165,3,78,39,0,165,166,5,68,0,0,166,167,3,78,39,0,167,191,1,0,0,0,168,
		169,5,43,0,0,169,170,3,78,39,0,170,171,5,68,0,0,171,172,3,78,39,0,172,
		191,1,0,0,0,173,174,5,44,0,0,174,191,3,78,39,0,175,176,5,45,0,0,176,177,
		3,78,39,0,177,178,5,68,0,0,178,179,3,78,39,0,179,191,1,0,0,0,180,181,5,
		46,0,0,181,182,3,78,39,0,182,183,5,68,0,0,183,184,3,78,39,0,184,191,1,
		0,0,0,185,186,5,47,0,0,186,187,3,78,39,0,187,188,5,68,0,0,188,189,3,78,
		39,0,189,191,1,0,0,0,190,158,1,0,0,0,190,163,1,0,0,0,190,168,1,0,0,0,190,
		173,1,0,0,0,190,175,1,0,0,0,190,180,1,0,0,0,190,185,1,0,0,0,191,23,1,0,
		0,0,192,204,3,32,16,0,193,204,3,40,20,0,194,204,3,36,18,0,195,204,3,34,
		17,0,196,204,3,38,19,0,197,204,3,48,24,0,198,204,3,50,25,0,199,204,3,62,
		31,0,200,204,3,58,29,0,201,204,3,60,30,0,202,204,3,68,34,0,203,192,1,0,
		0,0,203,193,1,0,0,0,203,194,1,0,0,0,203,195,1,0,0,0,203,196,1,0,0,0,203,
		197,1,0,0,0,203,198,1,0,0,0,203,199,1,0,0,0,203,200,1,0,0,0,203,201,1,
		0,0,0,203,202,1,0,0,0,204,25,1,0,0,0,205,206,3,78,39,0,206,27,1,0,0,0,
		207,209,5,89,0,0,208,210,3,4,2,0,209,208,1,0,0,0,210,211,1,0,0,0,211,209,
		1,0,0,0,211,212,1,0,0,0,212,213,1,0,0,0,213,214,5,90,0,0,214,29,1,0,0,
		0,215,224,3,4,2,0,216,218,5,89,0,0,217,219,3,4,2,0,218,217,1,0,0,0,219,
		220,1,0,0,0,220,218,1,0,0,0,220,221,1,0,0,0,221,222,1,0,0,0,222,223,5,
		90,0,0,223,225,1,0,0,0,224,216,1,0,0,0,224,225,1,0,0,0,225,31,1,0,0,0,
		226,227,5,26,0,0,227,228,3,26,13,0,228,229,5,27,0,0,229,234,3,28,14,0,
		230,231,5,28,0,0,231,232,3,28,14,0,232,233,6,16,-1,0,233,235,1,0,0,0,234,
		230,1,0,0,0,234,235,1,0,0,0,235,236,1,0,0,0,236,237,5,29,0,0,237,33,1,
		0,0,0,238,239,5,17,0,0,239,240,3,78,39,0,240,241,5,85,0,0,241,242,3,78,
		39,0,242,243,5,18,0,0,243,248,3,26,13,0,244,245,5,19,0,0,245,246,3,26,
		13,0,246,247,6,17,-1,0,247,249,1,0,0,0,248,244,1,0,0,0,248,249,1,0,0,0,
		249,250,1,0,0,0,250,251,3,28,14,0,251,252,5,20,0,0,252,253,3,26,13,0,253,
		35,1,0,0,0,254,255,5,21,0,0,255,256,3,26,13,0,256,257,5,22,0,0,257,258,
		3,28,14,0,258,259,5,23,0,0,259,37,1,0,0,0,260,261,5,24,0,0,261,262,3,28,
		14,0,262,263,5,25,0,0,263,264,3,26,13,0,264,39,1,0,0,0,265,266,5,13,0,
		0,266,267,3,78,39,0,267,268,5,14,0,0,268,269,3,44,22,0,269,270,5,16,0,
		0,270,41,1,0,0,0,271,275,5,15,0,0,272,275,3,26,13,0,273,275,3,46,23,0,
		274,271,1,0,0,0,274,272,1,0,0,0,274,273,1,0,0,0,275,276,1,0,0,0,276,277,
		5,67,0,0,277,280,3,30,15,0,278,280,5,6,0,0,279,274,1,0,0,0,279,278,1,0,
		0,0,280,43,1,0,0,0,281,283,5,89,0,0,282,284,3,42,21,0,283,282,1,0,0,0,
		284,285,1,0,0,0,285,283,1,0,0,0,285,286,1,0,0,0,286,287,1,0,0,0,287,288,
		5,90,0,0,288,45,1,0,0,0,289,290,3,26,13,0,290,291,5,18,0,0,291,292,3,26,
		13,0,292,47,1,0,0,0,293,294,5,30,0,0,294,296,3,104,52,0,295,297,3,52,26,
		0,296,295,1,0,0,0,296,297,1,0,0,0,297,298,1,0,0,0,298,299,3,28,14,0,299,
		300,5,31,0,0,300,49,1,0,0,0,301,302,5,33,0,0,302,304,5,86,0,0,303,305,
		3,52,26,0,304,303,1,0,0,0,304,305,1,0,0,0,305,306,1,0,0,0,306,307,5,37,
		0,0,307,308,3,90,45,0,308,309,3,28,14,0,309,310,5,34,0,0,310,51,1,0,0,
		0,311,320,5,61,0,0,312,317,3,54,27,0,313,314,5,68,0,0,314,316,3,54,27,
		0,315,313,1,0,0,0,316,319,1,0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,318,
		321,1,0,0,0,319,317,1,0,0,0,320,312,1,0,0,0,320,321,1,0,0,0,321,322,1,
		0,0,0,322,323,5,62,0,0,323,53,1,0,0,0,324,326,7,1,0,0,325,324,1,0,0,0,
		325,326,1,0,0,0,326,327,1,0,0,0,327,328,5,86,0,0,328,329,5,67,0,0,329,
		330,3,90,45,0,330,55,1,0,0,0,331,336,3,78,39,0,332,333,5,68,0,0,333,335,
		3,78,39,0,334,332,1,0,0,0,335,338,1,0,0,0,336,334,1,0,0,0,336,337,1,0,
		0,0,337,57,1,0,0,0,338,336,1,0,0,0,339,340,5,39,0,0,340,341,5,86,0,0,341,
		342,5,79,0,0,342,343,5,61,0,0,343,348,5,86,0,0,344,345,5,68,0,0,345,347,
		5,86,0,0,346,344,1,0,0,0,347,350,1,0,0,0,348,346,1,0,0,0,348,349,1,0,0,
		0,349,351,1,0,0,0,350,348,1,0,0,0,351,352,5,62,0,0,352,59,1,0,0,0,353,
		354,5,39,0,0,354,355,5,86,0,0,355,356,5,79,0,0,356,357,5,78,0,0,357,358,
		3,90,45,0,358,61,1,0,0,0,359,360,5,39,0,0,360,361,5,86,0,0,361,362,3,64,
		32,0,362,363,5,40,0,0,363,63,1,0,0,0,364,366,5,89,0,0,365,367,3,66,33,
		0,366,365,1,0,0,0,367,368,1,0,0,0,368,366,1,0,0,0,368,369,1,0,0,0,369,
		370,1,0,0,0,370,371,5,90,0,0,371,65,1,0,0,0,372,375,3,12,6,0,373,375,5,
		6,0,0,374,372,1,0,0,0,374,373,1,0,0,0,375,67,1,0,0,0,376,377,5,52,0,0,
		377,380,5,86,0,0,378,379,5,54,0,0,379,381,5,86,0,0,380,378,1,0,0,0,380,
		381,1,0,0,0,381,382,1,0,0,0,382,383,3,70,35,0,383,384,5,53,0,0,384,69,
		1,0,0,0,385,390,5,89,0,0,386,391,3,72,36,0,387,391,3,74,37,0,388,391,3,
		10,5,0,389,391,5,6,0,0,390,386,1,0,0,0,390,387,1,0,0,0,390,388,1,0,0,0,
		390,389,1,0,0,0,391,392,1,0,0,0,392,390,1,0,0,0,392,393,1,0,0,0,393,394,
		1,0,0,0,394,395,5,90,0,0,395,71,1,0,0,0,396,398,3,76,38,0,397,396,1,0,
		0,0,397,398,1,0,0,0,398,399,1,0,0,0,399,400,5,86,0,0,400,401,5,67,0,0,
		401,402,3,90,45,0,402,73,1,0,0,0,403,405,3,76,38,0,404,403,1,0,0,0,404,
		405,1,0,0,0,405,408,1,0,0,0,406,409,3,48,24,0,407,409,3,50,25,0,408,406,
		1,0,0,0,408,407,1,0,0,0,409,75,1,0,0,0,410,411,7,2,0,0,411,77,1,0,0,0,
		412,413,3,80,40,0,413,79,1,0,0,0,414,415,6,40,-1,0,415,416,5,60,0,0,416,
		417,3,80,40,5,417,418,6,40,-1,0,418,428,1,0,0,0,419,420,3,84,42,0,420,
		421,6,40,-1,0,421,428,1,0,0,0,422,423,5,61,0,0,423,424,3,80,40,0,424,425,
		5,62,0,0,425,426,6,40,-1,0,426,428,1,0,0,0,427,414,1,0,0,0,427,419,1,0,
		0,0,427,422,1,0,0,0,428,441,1,0,0,0,429,430,10,6,0,0,430,431,3,82,41,0,
		431,432,3,80,40,7,432,440,1,0,0,0,433,434,10,4,0,0,434,435,5,58,0,0,435,
		440,3,80,40,5,436,437,10,3,0,0,437,438,5,59,0,0,438,440,3,80,40,4,439,
		429,1,0,0,0,439,433,1,0,0,0,439,436,1,0,0,0,440,443,1,0,0,0,441,439,1,
		0,0,0,441,442,1,0,0,0,442,81,1,0,0,0,443,441,1,0,0,0,444,445,7,3,0,0,445,
		83,1,0,0,0,446,447,6,42,-1,0,447,448,5,57,0,0,448,449,5,86,0,0,449,469,
		3,86,43,0,450,451,5,86,0,0,451,469,6,42,-1,0,452,453,3,88,44,0,453,454,
		6,42,-1,0,454,469,1,0,0,0,455,456,5,78,0,0,456,457,3,84,42,12,457,458,
		6,42,-1,0,458,469,1,0,0,0,459,460,5,71,0,0,460,461,3,84,42,9,461,462,6,
		42,-1,0,462,469,1,0,0,0,463,464,5,61,0,0,464,465,3,84,42,0,465,466,5,62,
		0,0,466,467,6,42,-1,0,467,469,1,0,0,0,468,446,1,0,0,0,468,450,1,0,0,0,
		468,452,1,0,0,0,468,455,1,0,0,0,468,459,1,0,0,0,468,463,1,0,0,0,469,506,
		1,0,0,0,470,471,10,10,0,0,471,472,5,77,0,0,472,505,3,84,42,10,473,474,
		10,8,0,0,474,475,5,75,0,0,475,505,3,84,42,9,476,477,10,7,0,0,477,478,5,
		74,0,0,478,505,3,84,42,8,479,480,10,6,0,0,480,481,5,72,0,0,481,505,3,84,
		42,7,482,483,10,5,0,0,483,484,5,76,0,0,484,505,3,84,42,6,485,486,10,4,
		0,0,486,487,5,71,0,0,487,505,3,84,42,5,488,489,10,3,0,0,489,490,5,70,0,
		0,490,505,3,84,42,4,491,492,10,2,0,0,492,493,5,73,0,0,493,505,3,84,42,
		3,494,495,10,15,0,0,495,496,5,69,0,0,496,505,5,86,0,0,497,498,10,14,0,
		0,498,505,3,96,48,0,499,500,10,13,0,0,500,505,3,86,43,0,501,502,10,11,
		0,0,502,503,5,78,0,0,503,505,6,42,-1,0,504,470,1,0,0,0,504,473,1,0,0,0,
		504,476,1,0,0,0,504,479,1,0,0,0,504,482,1,0,0,0,504,485,1,0,0,0,504,488,
		1,0,0,0,504,491,1,0,0,0,504,494,1,0,0,0,504,497,1,0,0,0,504,499,1,0,0,
		0,504,501,1,0,0,0,505,508,1,0,0,0,506,504,1,0,0,0,506,507,1,0,0,0,507,
		85,1,0,0,0,508,506,1,0,0,0,509,511,5,61,0,0,510,512,3,56,28,0,511,510,
		1,0,0,0,511,512,1,0,0,0,512,513,1,0,0,0,513,514,5,62,0,0,514,87,1,0,0,
		0,515,528,3,98,49,0,516,517,5,2,0,0,517,528,6,44,-1,0,518,519,5,1,0,0,
		519,528,6,44,-1,0,520,521,5,5,0,0,521,528,6,44,-1,0,522,523,5,3,0,0,523,
		528,6,44,-1,0,524,525,3,96,48,0,525,526,6,44,-1,0,526,528,1,0,0,0,527,
		515,1,0,0,0,527,516,1,0,0,0,527,518,1,0,0,0,527,520,1,0,0,0,527,522,1,
		0,0,0,527,524,1,0,0,0,528,89,1,0,0,0,529,530,5,12,0,0,530,531,5,63,0,0,
		531,536,3,94,47,0,532,533,5,68,0,0,533,535,3,94,47,0,534,532,1,0,0,0,535,
		538,1,0,0,0,536,534,1,0,0,0,536,537,1,0,0,0,537,539,1,0,0,0,538,536,1,
		0,0,0,539,540,5,64,0,0,540,541,5,14,0,0,541,542,3,92,46,0,542,543,6,45,
		-1,0,543,548,1,0,0,0,544,545,3,92,46,0,545,546,6,45,-1,0,546,548,1,0,0,
		0,547,529,1,0,0,0,547,544,1,0,0,0,548,91,1,0,0,0,549,550,7,4,0,0,550,93,
		1,0,0,0,551,552,3,78,39,0,552,553,5,67,0,0,553,554,3,78,39,0,554,95,1,
		0,0,0,555,556,5,63,0,0,556,561,3,78,39,0,557,558,5,68,0,0,558,560,3,78,
		39,0,559,557,1,0,0,0,560,563,1,0,0,0,561,559,1,0,0,0,561,562,1,0,0,0,562,
		564,1,0,0,0,563,561,1,0,0,0,564,565,5,64,0,0,565,97,1,0,0,0,566,567,3,
		102,51,0,567,568,6,49,-1,0,568,573,1,0,0,0,569,570,3,100,50,0,570,571,
		6,49,-1,0,571,573,1,0,0,0,572,566,1,0,0,0,572,569,1,0,0,0,573,99,1,0,0,
		0,574,576,5,71,0,0,575,574,1,0,0,0,575,576,1,0,0,0,576,587,1,0,0,0,577,
		579,5,4,0,0,578,577,1,0,0,0,578,579,1,0,0,0,579,580,1,0,0,0,580,581,5,
		69,0,0,581,588,5,4,0,0,582,583,5,4,0,0,583,585,5,69,0,0,584,586,5,4,0,
		0,585,584,1,0,0,0,585,586,1,0,0,0,586,588,1,0,0,0,587,578,1,0,0,0,587,
		582,1,0,0,0,588,101,1,0,0,0,589,591,5,71,0,0,590,589,1,0,0,0,590,591,1,
		0,0,0,591,592,1,0,0,0,592,593,5,4,0,0,593,103,1,0,0,0,594,595,7,5,0,0,
		595,105,1,0,0,0,46,109,119,122,133,190,203,211,220,224,234,248,274,279,
		285,296,304,317,320,325,336,348,368,374,380,390,392,397,404,408,427,439,
		441,468,504,506,511,527,536,547,561,572,575,578,585,587,590
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
