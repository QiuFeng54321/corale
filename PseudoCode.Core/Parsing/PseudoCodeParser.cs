//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PseudoCode.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using PseudoCode.Core.Runtime;
using System.Globalization;
using PseudoCode.Core.Runtime.Types;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class PseudoCodeParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Character=1, String=2, Date=3, NumberSequence=4, Boolean=5, NL=6, Newline=7, 
		Declare=8, Constant=9, IoKeyword=10, Array=11, Case=12, Of=13, Otherwise=14, 
		Endcase=15, For=16, To=17, Step=18, Next=19, While=20, Do=21, Endwhile=22, 
		Repeat=23, Until=24, If=25, Then=26, Else=27, Endif=28, Procedure=29, 
		Endprocedure=30, Call=31, Extern=32, Function=33, Endfunction=34, Byval=35, 
		Byref=36, Returns=37, Return=38, OperatorKeyword=39, EndOperator=40, Type=41, 
		Endtype=42, OpenFile=43, ReadFile=44, WriteFile=45, CloseFile=46, Seek=47, 
		GetRecord=48, PutRecord=49, Read=50, Write=51, Append=52, Random=53, Class=54, 
		Endclass=55, Inherits=56, Private=57, Public=58, New=59, Namespace=60, 
		EndNamespace=61, Use=62, Malloc=63, SizeOf=64, Import=65, And=66, Or=67, 
		Not=68, OpenParen=69, CloseParen=70, OpenBrack=71, CloseBrack=72, OpenBrace=73, 
		CloseBrace=74, Colon=75, Comma=76, Dot=77, Add=78, Subtract=79, Multiply=80, 
		BitAnd=81, IntDivide=82, Divide=83, Mod=84, Pow=85, Caret=86, Equal=87, 
		Greater=88, Smaller=89, GreaterEqual=90, SmallerEqual=91, NotEqual=92, 
		AssignmentNotation=93, NamespaceAccess=94, Identifier=95, Skip=96, UnknownChar=97, 
		INDENT=98, DEDENT=99;
	public const int
		RULE_fileInput = 0, RULE_singleInput = 1, RULE_statement = 2, RULE_simpleStatement = 3, 
		RULE_smallStatement = 4, RULE_assignmentStatement = 5, RULE_declarationStatement = 6, 
		RULE_constantStatement = 7, RULE_ioStatement = 8, RULE_returnStatement = 9, 
		RULE_callStatement = 10, RULE_fileStatement = 11, RULE_compoundStatement = 12, 
		RULE_scopedExpression = 13, RULE_indentedBlock = 14, RULE_alignedBlock = 15, 
		RULE_ifStatement = 16, RULE_forStatement = 17, RULE_whileStatement = 18, 
		RULE_repeatStatement = 19, RULE_namespaceStatement = 20, RULE_useNamespaceStatement = 21, 
		RULE_importStatement = 22, RULE_caseStatement = 23, RULE_caseBranch = 24, 
		RULE_caseBody = 25, RULE_valueRange = 26, RULE_externFunctionDefinition = 27, 
		RULE_procedureDefinition = 28, RULE_functionDefinition = 29, RULE_argumentsDeclaration = 30, 
		RULE_argumentDeclaration = 31, RULE_genericUtilisation = 32, RULE_genericDeclaration = 33, 
		RULE_tuple = 34, RULE_dataTypeList = 35, RULE_identifierList = 36, RULE_enumDefinition = 37, 
		RULE_enumBody = 38, RULE_typeAliasDefinition = 39, RULE_typeDefinition = 40, 
		RULE_typeBody = 41, RULE_typeChild = 42, RULE_classDefinition = 43, RULE_classBody = 44, 
		RULE_classDataMember = 45, RULE_classMethod = 46, RULE_accessLevel = 47, 
		RULE_expression = 48, RULE_logicExpression = 49, RULE_arithmeticExpression = 50, 
		RULE_identiferAccess = 51, RULE_arguments = 52, RULE_atom = 53, RULE_sizeOfExpression = 54, 
		RULE_mallocExpression = 55, RULE_dataType = 56, RULE_modularDataType = 57, 
		RULE_arrayRange = 58, RULE_array = 59, RULE_number = 60, RULE_decimal = 61, 
		RULE_integer = 62, RULE_identifierWithNew = 63;
	public static readonly string[] ruleNames = {
		"fileInput", "singleInput", "statement", "simpleStatement", "smallStatement", 
		"assignmentStatement", "declarationStatement", "constantStatement", "ioStatement", 
		"returnStatement", "callStatement", "fileStatement", "compoundStatement", 
		"scopedExpression", "indentedBlock", "alignedBlock", "ifStatement", "forStatement", 
		"whileStatement", "repeatStatement", "namespaceStatement", "useNamespaceStatement", 
		"importStatement", "caseStatement", "caseBranch", "caseBody", "valueRange", 
		"externFunctionDefinition", "procedureDefinition", "functionDefinition", 
		"argumentsDeclaration", "argumentDeclaration", "genericUtilisation", "genericDeclaration", 
		"tuple", "dataTypeList", "identifierList", "enumDefinition", "enumBody", 
		"typeAliasDefinition", "typeDefinition", "typeBody", "typeChild", "classDefinition", 
		"classBody", "classDataMember", "classMethod", "accessLevel", "expression", 
		"logicExpression", "arithmeticExpression", "identiferAccess", "arguments", 
		"atom", "sizeOfExpression", "mallocExpression", "dataType", "modularDataType", 
		"arrayRange", "array", "number", "decimal", "integer", "identifierWithNew"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'DECLARE'", "'CONSTANT'", 
		null, "'ARRAY'", "'CASE'", "'OF'", "'OTHERWISE'", "'ENDCASE'", "'FOR'", 
		"'TO'", "'STEP'", "'NEXT'", "'WHILE'", "'DO'", "'ENDWHILE'", "'REPEAT'", 
		"'UNTIL'", "'IF'", "'THEN'", "'ELSE'", "'ENDIF'", "'PROCEDURE'", "'ENDPROCEDURE'", 
		"'CALL'", "'EXTERN'", "'FUNCTION'", "'ENDFUNCTION'", "'BYVAL'", "'BYREF'", 
		"'RETURNS'", "'RETURN'", "'OPERATOR'", "'ENDOPERATOR'", "'TYPE'", "'ENDTYPE'", 
		"'OPENFILE'", "'READFILE'", "'WRITEFILE'", "'CLOSEFILE'", "'SEEK'", "'GETRECORD'", 
		"'PUTRECORD'", "'READ'", "'WRITE'", "'APPEND'", "'RANDOM'", "'CLASS'", 
		"'ENDCLASS'", "'INHERITS'", "'PRIVATE'", "'PUBLIC'", "'NEW'", "'NAMESPACE'", 
		"'ENDNAMESPACE'", "'USE'", "'MALLOC'", "'SIZEOF'", "'IMPORT'", "'AND'", 
		"'OR'", "'NOT'", "'('", "')'", "'['", "']'", "'{'", "'}'", "':'", "','", 
		"'.'", "'+'", "'-'", "'*'", "'&'", "'DIV'", "'/'", "'MOD'", "'POW'", "'^'", 
		"'='", "'>'", "'<'", "'>='", "'<='", "'<>'", "'<-'", "'::'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Character", "String", "Date", "NumberSequence", "Boolean", "NL", 
		"Newline", "Declare", "Constant", "IoKeyword", "Array", "Case", "Of", 
		"Otherwise", "Endcase", "For", "To", "Step", "Next", "While", "Do", "Endwhile", 
		"Repeat", "Until", "If", "Then", "Else", "Endif", "Procedure", "Endprocedure", 
		"Call", "Extern", "Function", "Endfunction", "Byval", "Byref", "Returns", 
		"Return", "OperatorKeyword", "EndOperator", "Type", "Endtype", "OpenFile", 
		"ReadFile", "WriteFile", "CloseFile", "Seek", "GetRecord", "PutRecord", 
		"Read", "Write", "Append", "Random", "Class", "Endclass", "Inherits", 
		"Private", "Public", "New", "Namespace", "EndNamespace", "Use", "Malloc", 
		"SizeOf", "Import", "And", "Or", "Not", "OpenParen", "CloseParen", "OpenBrack", 
		"CloseBrack", "OpenBrace", "CloseBrace", "Colon", "Comma", "Dot", "Add", 
		"Subtract", "Multiply", "BitAnd", "IntDivide", "Divide", "Mod", "Pow", 
		"Caret", "Equal", "Greater", "Smaller", "GreaterEqual", "SmallerEqual", 
		"NotEqual", "AssignmentNotation", "NamespaceAccess", "Identifier", "Skip", 
		"UnknownChar", "INDENT", "DEDENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PseudoCode.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PseudoCodeParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PseudoCodeParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PseudoCodeParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileInputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PseudoCodeParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FileInputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileInput; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterFileInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitFileInput(this);
		}
	}

	[RuleVersion(0)]
	public FileInputContext fileInput() {
		FileInputContext _localctx = new FileInputContext(Context, State);
		EnterRule(_localctx, 0, RULE_fileInput);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Character) | (1L << String) | (1L << Date) | (1L << NumberSequence) | (1L << Boolean) | (1L << NL) | (1L << Declare) | (1L << Constant) | (1L << IoKeyword) | (1L << Case) | (1L << For) | (1L << While) | (1L << Repeat) | (1L << If) | (1L << Procedure) | (1L << Call) | (1L << Extern) | (1L << Function) | (1L << Return) | (1L << OperatorKeyword) | (1L << Type) | (1L << OpenFile) | (1L << ReadFile) | (1L << WriteFile) | (1L << CloseFile) | (1L << Seek) | (1L << GetRecord) | (1L << PutRecord) | (1L << Class) | (1L << New) | (1L << Namespace) | (1L << Use) | (1L << Malloc))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SizeOf - 64)) | (1L << (Import - 64)) | (1L << (Not - 64)) | (1L << (OpenParen - 64)) | (1L << (OpenBrack - 64)) | (1L << (Dot - 64)) | (1L << (Subtract - 64)) | (1L << (Caret - 64)) | (1L << (Identifier - 64)))) != 0)) {
				{
				{
				State = 128;
				statement();
				}
				}
				State = 133;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 134;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleInputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(PseudoCodeParser.NL, 0); }
		public SingleInputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleInput; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterSingleInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitSingleInput(this);
		}
	}

	[RuleVersion(0)]
	public SingleInputContext singleInput() {
		SingleInputContext _localctx = new SingleInputContext(Context, State);
		EnterRule(_localctx, 2, RULE_singleInput);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			statement();
			State = 137;
			Match(NL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(PseudoCodeParser.NL, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 144;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Character:
			case String:
			case Date:
			case NumberSequence:
			case Boolean:
			case Declare:
			case Constant:
			case IoKeyword:
			case Case:
			case For:
			case While:
			case Repeat:
			case If:
			case Procedure:
			case Call:
			case Extern:
			case Function:
			case Return:
			case OperatorKeyword:
			case Type:
			case OpenFile:
			case ReadFile:
			case WriteFile:
			case CloseFile:
			case Seek:
			case GetRecord:
			case PutRecord:
			case Class:
			case New:
			case Namespace:
			case Use:
			case Malloc:
			case SizeOf:
			case Import:
			case Not:
			case OpenParen:
			case OpenBrack:
			case Dot:
			case Subtract:
			case Caret:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 141;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Character:
				case String:
				case Date:
				case NumberSequence:
				case Boolean:
				case Declare:
				case Constant:
				case IoKeyword:
				case Call:
				case Return:
				case OpenFile:
				case ReadFile:
				case WriteFile:
				case CloseFile:
				case Seek:
				case GetRecord:
				case PutRecord:
				case New:
				case Namespace:
				case Use:
				case Malloc:
				case SizeOf:
				case Not:
				case OpenParen:
				case OpenBrack:
				case Dot:
				case Subtract:
				case Caret:
				case Identifier:
					{
					State = 139;
					simpleStatement();
					}
					break;
				case Case:
				case For:
				case While:
				case Repeat:
				case If:
				case Procedure:
				case Extern:
				case Function:
				case OperatorKeyword:
				case Type:
				case Class:
				case Import:
					{
					State = 140;
					compoundStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 143;
				Match(NL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SmallStatementContext smallStatement() {
			return GetRuleContext<SmallStatementContext>(0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterSimpleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitSimpleStatement(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStatementContext simpleStatement() {
		SimpleStatementContext _localctx = new SimpleStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_simpleStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			smallStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SmallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationStatementContext declarationStatement() {
			return GetRuleContext<DeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantStatementContext constantStatement() {
			return GetRuleContext<ConstantStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoStatementContext ioStatement() {
			return GetRuleContext<IoStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileStatementContext fileStatement() {
			return GetRuleContext<FileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallStatementContext callStatement() {
			return GetRuleContext<CallStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceStatementContext namespaceStatement() {
			return GetRuleContext<NamespaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseNamespaceStatementContext useNamespaceStatement() {
			return GetRuleContext<UseNamespaceStatementContext>(0);
		}
		public SmallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_smallStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterSmallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitSmallStatement(this);
		}
	}

	[RuleVersion(0)]
	public SmallStatementContext smallStatement() {
		SmallStatementContext _localctx = new SmallStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_smallStatement);
		try {
			State = 157;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Character:
			case String:
			case Date:
			case NumberSequence:
			case Boolean:
			case New:
			case Malloc:
			case SizeOf:
			case Not:
			case OpenParen:
			case OpenBrack:
			case Dot:
			case Subtract:
			case Caret:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 148;
				assignmentStatement();
				}
				break;
			case Declare:
				EnterOuterAlt(_localctx, 2);
				{
				State = 149;
				declarationStatement();
				}
				break;
			case Constant:
				EnterOuterAlt(_localctx, 3);
				{
				State = 150;
				constantStatement();
				}
				break;
			case IoKeyword:
				EnterOuterAlt(_localctx, 4);
				{
				State = 151;
				ioStatement();
				}
				break;
			case OpenFile:
			case ReadFile:
			case WriteFile:
			case CloseFile:
			case Seek:
			case GetRecord:
			case PutRecord:
				EnterOuterAlt(_localctx, 5);
				{
				State = 152;
				fileStatement();
				}
				break;
			case Return:
				EnterOuterAlt(_localctx, 6);
				{
				State = 153;
				returnStatement();
				}
				break;
			case Call:
				EnterOuterAlt(_localctx, 7);
				{
				State = 154;
				callStatement();
				}
				break;
			case Namespace:
				EnterOuterAlt(_localctx, 8);
				{
				State = 155;
				namespaceStatement();
				}
				break;
			case Use:
				EnterOuterAlt(_localctx, 9);
				{
				State = 156;
				useNamespaceStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		public ExpressionContext l;
		public ExpressionContext r;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssignmentNotation() { return GetToken(PseudoCodeParser.AssignmentNotation, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterAssignmentStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitAssignmentStatement(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_assignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			_localctx.l = expression();
			State = 160;
			Match(AssignmentNotation);
			State = 161;
			_localctx.r = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Declare() { return GetToken(PseudoCodeParser.Declare, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(PseudoCodeParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public DeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitDeclarationStatement(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationStatementContext declarationStatement() {
		DeclarationStatementContext _localctx = new DeclarationStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_declarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			Match(Declare);
			State = 164;
			identifierList();
			State = 165;
			Match(Colon);
			State = 166;
			dataType(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constant() { return GetToken(PseudoCodeParser.Constant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PseudoCodeParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(PseudoCodeParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstantStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterConstantStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitConstantStatement(this);
		}
	}

	[RuleVersion(0)]
	public ConstantStatementContext constantStatement() {
		ConstantStatementContext _localctx = new ConstantStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_constantStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			Match(Constant);
			State = 169;
			Match(Identifier);
			State = 170;
			Match(Equal);
			State = 171;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IoKeyword() { return GetToken(PseudoCodeParser.IoKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		public IoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ioStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterIoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitIoStatement(this);
		}
	}

	[RuleVersion(0)]
	public IoStatementContext ioStatement() {
		IoStatementContext _localctx = new IoStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_ioStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			Match(IoKeyword);
			State = 174;
			tuple();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(PseudoCodeParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			Match(Return);
			State = 177;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Call() { return GetToken(PseudoCodeParser.Call, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitCallStatement(this);
		}
	}

	[RuleVersion(0)]
	public CallStatementContext callStatement() {
		CallStatementContext _localctx = new CallStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_callStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			Match(Call);
			State = 180;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileStatementContext : ParserRuleContext {
		public IToken fileMode;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenFile() { return GetToken(PseudoCodeParser.OpenFile, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(PseudoCodeParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Read() { return GetToken(PseudoCodeParser.Read, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Write() { return GetToken(PseudoCodeParser.Write, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Append() { return GetToken(PseudoCodeParser.Append, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Random() { return GetToken(PseudoCodeParser.Random, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ReadFile() { return GetToken(PseudoCodeParser.ReadFile, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(PseudoCodeParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WriteFile() { return GetToken(PseudoCodeParser.WriteFile, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseFile() { return GetToken(PseudoCodeParser.CloseFile, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Seek() { return GetToken(PseudoCodeParser.Seek, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GetRecord() { return GetToken(PseudoCodeParser.GetRecord, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PutRecord() { return GetToken(PseudoCodeParser.PutRecord, 0); }
		public FileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterFileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitFileStatement(this);
		}
	}

	[RuleVersion(0)]
	public FileStatementContext fileStatement() {
		FileStatementContext _localctx = new FileStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_fileStatement);
		int _la;
		try {
			State = 214;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenFile:
				EnterOuterAlt(_localctx, 1);
				{
				State = 182;
				Match(OpenFile);
				State = 183;
				expression();
				State = 184;
				Match(For);
				State = 185;
				_localctx.fileMode = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Read) | (1L << Write) | (1L << Append) | (1L << Random))) != 0)) ) {
					_localctx.fileMode = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case ReadFile:
				EnterOuterAlt(_localctx, 2);
				{
				State = 187;
				Match(ReadFile);
				State = 188;
				expression();
				State = 189;
				Match(Comma);
				State = 190;
				expression();
				}
				break;
			case WriteFile:
				EnterOuterAlt(_localctx, 3);
				{
				State = 192;
				Match(WriteFile);
				State = 193;
				expression();
				State = 194;
				Match(Comma);
				State = 195;
				expression();
				}
				break;
			case CloseFile:
				EnterOuterAlt(_localctx, 4);
				{
				State = 197;
				Match(CloseFile);
				State = 198;
				expression();
				}
				break;
			case Seek:
				EnterOuterAlt(_localctx, 5);
				{
				State = 199;
				Match(Seek);
				State = 200;
				expression();
				State = 201;
				Match(Comma);
				State = 202;
				expression();
				}
				break;
			case GetRecord:
				EnterOuterAlt(_localctx, 6);
				{
				State = 204;
				Match(GetRecord);
				State = 205;
				expression();
				State = 206;
				Match(Comma);
				State = 207;
				expression();
				}
				break;
			case PutRecord:
				EnterOuterAlt(_localctx, 7);
				{
				State = 209;
				Match(PutRecord);
				State = 210;
				expression();
				State = 211;
				Match(Comma);
				State = 212;
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement() {
			return GetRuleContext<CaseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatStatementContext repeatStatement() {
			return GetRuleContext<RepeatStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext importStatement() {
			return GetRuleContext<ImportStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternFunctionDefinitionContext externFunctionDefinition() {
			return GetRuleContext<ExternFunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefinitionContext procedureDefinition() {
			return GetRuleContext<ProcedureDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDefinitionContext typeDefinition() {
			return GetRuleContext<TypeDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefinitionContext enumDefinition() {
			return GetRuleContext<EnumDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAliasDefinitionContext typeAliasDefinition() {
			return GetRuleContext<TypeAliasDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefinitionContext classDefinition() {
			return GetRuleContext<ClassDefinitionContext>(0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_compoundStatement);
		try {
			State = 229;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 216;
				ifStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 217;
				caseStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 218;
				whileStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 219;
				forStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 220;
				repeatStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 221;
				importStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 222;
				externFunctionDefinition();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 223;
				procedureDefinition();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 224;
				functionDefinition();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 225;
				typeDefinition();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 226;
				enumDefinition();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 227;
				typeAliasDefinition();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 228;
				classDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopedExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ScopedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scopedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterScopedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitScopedExpression(this);
		}
	}

	[RuleVersion(0)]
	public ScopedExpressionContext scopedExpression() {
		ScopedExpressionContext _localctx = new ScopedExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_scopedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndentedBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(PseudoCodeParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(PseudoCodeParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IndentedBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indentedBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterIndentedBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitIndentedBlock(this);
		}
	}

	[RuleVersion(0)]
	public IndentedBlockContext indentedBlock() {
		IndentedBlockContext _localctx = new IndentedBlockContext(Context, State);
		EnterRule(_localctx, 28, RULE_indentedBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			Match(INDENT);
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 234;
				statement();
				}
				}
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Character) | (1L << String) | (1L << Date) | (1L << NumberSequence) | (1L << Boolean) | (1L << NL) | (1L << Declare) | (1L << Constant) | (1L << IoKeyword) | (1L << Case) | (1L << For) | (1L << While) | (1L << Repeat) | (1L << If) | (1L << Procedure) | (1L << Call) | (1L << Extern) | (1L << Function) | (1L << Return) | (1L << OperatorKeyword) | (1L << Type) | (1L << OpenFile) | (1L << ReadFile) | (1L << WriteFile) | (1L << CloseFile) | (1L << Seek) | (1L << GetRecord) | (1L << PutRecord) | (1L << Class) | (1L << New) | (1L << Namespace) | (1L << Use) | (1L << Malloc))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SizeOf - 64)) | (1L << (Import - 64)) | (1L << (Not - 64)) | (1L << (OpenParen - 64)) | (1L << (OpenBrack - 64)) | (1L << (Dot - 64)) | (1L << (Subtract - 64)) | (1L << (Caret - 64)) | (1L << (Identifier - 64)))) != 0) );
			State = 239;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlignedBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(PseudoCodeParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(PseudoCodeParser.DEDENT, 0); }
		public AlignedBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alignedBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterAlignedBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitAlignedBlock(this);
		}
	}

	[RuleVersion(0)]
	public AlignedBlockContext alignedBlock() {
		AlignedBlockContext _localctx = new AlignedBlockContext(Context, State);
		EnterRule(_localctx, 30, RULE_alignedBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			statement();
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDENT) {
				{
				State = 242;
				Match(INDENT);
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 243;
					statement();
					}
					}
					State = 246;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Character) | (1L << String) | (1L << Date) | (1L << NumberSequence) | (1L << Boolean) | (1L << NL) | (1L << Declare) | (1L << Constant) | (1L << IoKeyword) | (1L << Case) | (1L << For) | (1L << While) | (1L << Repeat) | (1L << If) | (1L << Procedure) | (1L << Call) | (1L << Extern) | (1L << Function) | (1L << Return) | (1L << OperatorKeyword) | (1L << Type) | (1L << OpenFile) | (1L << ReadFile) | (1L << WriteFile) | (1L << CloseFile) | (1L << Seek) | (1L << GetRecord) | (1L << PutRecord) | (1L << Class) | (1L << New) | (1L << Namespace) | (1L << Use) | (1L << Malloc))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SizeOf - 64)) | (1L << (Import - 64)) | (1L << (Not - 64)) | (1L << (OpenParen - 64)) | (1L << (OpenBrack - 64)) | (1L << (Dot - 64)) | (1L << (Subtract - 64)) | (1L << (Caret - 64)) | (1L << (Identifier - 64)))) != 0) );
				State = 248;
				Match(DEDENT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public bool HasElse;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(PseudoCodeParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopedExpressionContext scopedExpression() {
			return GetRuleContext<ScopedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Then() { return GetToken(PseudoCodeParser.Then, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndentedBlockContext[] indentedBlock() {
			return GetRuleContexts<IndentedBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndentedBlockContext indentedBlock(int i) {
			return GetRuleContext<IndentedBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Endif() { return GetToken(PseudoCodeParser.Endif, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(PseudoCodeParser.Else, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			Match(If);
			State = 253;
			scopedExpression();
			State = 254;
			Match(Then);
			State = 255;
			indentedBlock();
			State = 260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Else) {
				{
				State = 256;
				Match(Else);
				State = 257;
				indentedBlock();
				_localctx.HasElse =  true;
				}
			}

			State = 262;
			Match(Endif);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public bool HasStep;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(PseudoCodeParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode To() { return GetToken(PseudoCodeParser.To, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopedExpressionContext[] scopedExpression() {
			return GetRuleContexts<ScopedExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopedExpressionContext scopedExpression(int i) {
			return GetRuleContext<ScopedExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndentedBlockContext indentedBlock() {
			return GetRuleContext<IndentedBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Next() { return GetToken(PseudoCodeParser.Next, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Step() { return GetToken(PseudoCodeParser.Step, 0); }
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			Match(For);
			State = 265;
			assignmentStatement();
			State = 266;
			Match(To);
			State = 267;
			scopedExpression();
			State = 272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Step) {
				{
				State = 268;
				Match(Step);
				State = 269;
				scopedExpression();
				_localctx.HasStep =  true;
				}
			}

			State = 274;
			indentedBlock();
			State = 275;
			Match(Next);
			State = 276;
			scopedExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(PseudoCodeParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopedExpressionContext scopedExpression() {
			return GetRuleContext<ScopedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndentedBlockContext indentedBlock() {
			return GetRuleContext<IndentedBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Endwhile() { return GetToken(PseudoCodeParser.Endwhile, 0); }
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			Match(While);
			State = 279;
			scopedExpression();
			State = 280;
			indentedBlock();
			State = 281;
			Match(Endwhile);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Repeat() { return GetToken(PseudoCodeParser.Repeat, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndentedBlockContext indentedBlock() {
			return GetRuleContext<IndentedBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(PseudoCodeParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopedExpressionContext scopedExpression() {
			return GetRuleContext<ScopedExpressionContext>(0);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterRepeatStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitRepeatStatement(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementContext repeatStatement() {
		RepeatStatementContext _localctx = new RepeatStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_repeatStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			Match(Repeat);
			State = 284;
			indentedBlock();
			State = 285;
			Match(Until);
			State = 286;
			scopedExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Namespace() { return GetToken(PseudoCodeParser.Namespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentiferAccessContext identiferAccess() {
			return GetRuleContext<IdentiferAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndentedBlockContext indentedBlock() {
			return GetRuleContext<IndentedBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EndNamespace() { return GetToken(PseudoCodeParser.EndNamespace, 0); }
		public NamespaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterNamespaceStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitNamespaceStatement(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceStatementContext namespaceStatement() {
		NamespaceStatementContext _localctx = new NamespaceStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_namespaceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			Match(Namespace);
			State = 289;
			identiferAccess(0);
			State = 293;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 290;
				indentedBlock();
				State = 291;
				Match(EndNamespace);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseNamespaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Use() { return GetToken(PseudoCodeParser.Use, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Namespace() { return GetToken(PseudoCodeParser.Namespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentiferAccessContext identiferAccess() {
			return GetRuleContext<IdentiferAccessContext>(0);
		}
		public UseNamespaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useNamespaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterUseNamespaceStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitUseNamespaceStatement(this);
		}
	}

	[RuleVersion(0)]
	public UseNamespaceStatementContext useNamespaceStatement() {
		UseNamespaceStatementContext _localctx = new UseNamespaceStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_useNamespaceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			Match(Use);
			State = 296;
			Match(Namespace);
			State = 297;
			identiferAccess(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(PseudoCodeParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			Match(Import);
			State = 300;
			atom();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(PseudoCodeParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Of() { return GetToken(PseudoCodeParser.Of, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseBodyContext caseBody() {
			return GetRuleContext<CaseBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Endcase() { return GetToken(PseudoCodeParser.Endcase, 0); }
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_caseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			Match(Case);
			State = 303;
			expression();
			State = 304;
			Match(Of);
			State = 305;
			caseBody();
			State = 306;
			Match(Endcase);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBranchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(PseudoCodeParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AlignedBlockContext alignedBlock() {
			return GetRuleContext<AlignedBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Otherwise() { return GetToken(PseudoCodeParser.Otherwise, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopedExpressionContext scopedExpression() {
			return GetRuleContext<ScopedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueRangeContext valueRange() {
			return GetRuleContext<ValueRangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(PseudoCodeParser.NL, 0); }
		public CaseBranchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBranch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterCaseBranch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitCaseBranch(this);
		}
	}

	[RuleVersion(0)]
	public CaseBranchContext caseBranch() {
		CaseBranchContext _localctx = new CaseBranchContext(Context, State);
		EnterRule(_localctx, 48, RULE_caseBranch);
		try {
			State = 316;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Character:
			case String:
			case Date:
			case NumberSequence:
			case Boolean:
			case Otherwise:
			case New:
			case Malloc:
			case SizeOf:
			case Not:
			case OpenParen:
			case OpenBrack:
			case Dot:
			case Subtract:
			case Caret:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 311;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 308;
					Match(Otherwise);
					}
					break;
				case 2:
					{
					State = 309;
					scopedExpression();
					}
					break;
				case 3:
					{
					State = 310;
					valueRange();
					}
					break;
				}
				State = 313;
				Match(Colon);
				State = 314;
				alignedBlock();
				}
				break;
			case NL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 315;
				Match(NL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(PseudoCodeParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(PseudoCodeParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseBranchContext[] caseBranch() {
			return GetRuleContexts<CaseBranchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseBranchContext caseBranch(int i) {
			return GetRuleContext<CaseBranchContext>(i);
		}
		public CaseBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterCaseBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitCaseBody(this);
		}
	}

	[RuleVersion(0)]
	public CaseBodyContext caseBody() {
		CaseBodyContext _localctx = new CaseBodyContext(Context, State);
		EnterRule(_localctx, 50, RULE_caseBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318;
			Match(INDENT);
			State = 320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 319;
				caseBranch();
				}
				}
				State = 322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Character) | (1L << String) | (1L << Date) | (1L << NumberSequence) | (1L << Boolean) | (1L << NL) | (1L << Otherwise) | (1L << New) | (1L << Malloc))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SizeOf - 64)) | (1L << (Not - 64)) | (1L << (OpenParen - 64)) | (1L << (OpenBrack - 64)) | (1L << (Dot - 64)) | (1L << (Subtract - 64)) | (1L << (Caret - 64)) | (1L << (Identifier - 64)))) != 0) );
			State = 324;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueRangeContext : ParserRuleContext {
		public ScopedExpressionContext from;
		public ScopedExpressionContext to;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode To() { return GetToken(PseudoCodeParser.To, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopedExpressionContext[] scopedExpression() {
			return GetRuleContexts<ScopedExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopedExpressionContext scopedExpression(int i) {
			return GetRuleContext<ScopedExpressionContext>(i);
		}
		public ValueRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterValueRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitValueRange(this);
		}
	}

	[RuleVersion(0)]
	public ValueRangeContext valueRange() {
		ValueRangeContext _localctx = new ValueRangeContext(Context, State);
		EnterRule(_localctx, 52, RULE_valueRange);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			_localctx.from = scopedExpression();
			State = 327;
			Match(To);
			State = 328;
			_localctx.to = scopedExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternFunctionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extern() { return GetToken(PseudoCodeParser.Extern, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function() { return GetToken(PseudoCodeParser.Function, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PseudoCodeParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Returns() { return GetToken(PseudoCodeParser.Returns, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericDeclarationContext genericDeclaration() {
			return GetRuleContext<GenericDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsDeclarationContext argumentsDeclaration() {
			return GetRuleContext<ArgumentsDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Byref() { return GetToken(PseudoCodeParser.Byref, 0); }
		public ExternFunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externFunctionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterExternFunctionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitExternFunctionDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ExternFunctionDefinitionContext externFunctionDefinition() {
		ExternFunctionDefinitionContext _localctx = new ExternFunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 54, RULE_externFunctionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			Match(Extern);
			State = 331;
			Match(Function);
			State = 332;
			Match(Identifier);
			State = 334;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Smaller) {
				{
				State = 333;
				genericDeclaration();
				}
			}

			State = 337;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpenParen) {
				{
				State = 336;
				argumentsDeclaration();
				}
			}

			{
			State = 339;
			Match(Returns);
			State = 341;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Byref) {
				{
				State = 340;
				Match(Byref);
				}
			}

			State = 343;
			dataType(0);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Procedure() { return GetToken(PseudoCodeParser.Procedure, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierWithNewContext identifierWithNew() {
			return GetRuleContext<IdentifierWithNewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndentedBlockContext indentedBlock() {
			return GetRuleContext<IndentedBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Endprocedure() { return GetToken(PseudoCodeParser.Endprocedure, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericDeclarationContext genericDeclaration() {
			return GetRuleContext<GenericDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsDeclarationContext argumentsDeclaration() {
			return GetRuleContext<ArgumentsDeclarationContext>(0);
		}
		public ProcedureDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterProcedureDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitProcedureDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureDefinitionContext procedureDefinition() {
		ProcedureDefinitionContext _localctx = new ProcedureDefinitionContext(Context, State);
		EnterRule(_localctx, 56, RULE_procedureDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			Match(Procedure);
			State = 346;
			identifierWithNew();
			State = 348;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Smaller) {
				{
				State = 347;
				genericDeclaration();
				}
			}

			State = 351;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpenParen) {
				{
				State = 350;
				argumentsDeclaration();
				}
			}

			State = 353;
			indentedBlock();
			State = 354;
			Match(Endprocedure);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PseudoCodeParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Returns() { return GetToken(PseudoCodeParser.Returns, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndentedBlockContext indentedBlock() {
			return GetRuleContext<IndentedBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Endfunction() { return GetToken(PseudoCodeParser.Endfunction, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function() { return GetToken(PseudoCodeParser.Function, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OperatorKeyword() { return GetToken(PseudoCodeParser.OperatorKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericDeclarationContext genericDeclaration() {
			return GetRuleContext<GenericDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsDeclarationContext argumentsDeclaration() {
			return GetRuleContext<ArgumentsDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Byref() { return GetToken(PseudoCodeParser.Byref, 0); }
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterFunctionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitFunctionDefinition(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 58, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			_la = TokenStream.LA(1);
			if ( !(_la==Function || _la==OperatorKeyword) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 357;
			Match(Identifier);
			State = 359;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Smaller) {
				{
				State = 358;
				genericDeclaration();
				}
			}

			State = 362;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpenParen) {
				{
				State = 361;
				argumentsDeclaration();
				}
			}

			State = 364;
			Match(Returns);
			State = 366;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Byref) {
				{
				State = 365;
				Match(Byref);
				}
			}

			State = 368;
			dataType(0);
			State = 369;
			indentedBlock();
			State = 370;
			Match(Endfunction);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(PseudoCodeParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(PseudoCodeParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentDeclarationContext[] argumentDeclaration() {
			return GetRuleContexts<ArgumentDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentDeclarationContext argumentDeclaration(int i) {
			return GetRuleContext<ArgumentDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(PseudoCodeParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(PseudoCodeParser.Comma, i);
		}
		public ArgumentsDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentsDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterArgumentsDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitArgumentsDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsDeclarationContext argumentsDeclaration() {
		ArgumentsDeclarationContext _localctx = new ArgumentsDeclarationContext(Context, State);
		EnterRule(_localctx, 60, RULE_argumentsDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			Match(OpenParen);
			State = 381;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 35)) & ~0x3f) == 0 && ((1L << (_la - 35)) & ((1L << (Byval - 35)) | (1L << (Byref - 35)) | (1L << (Identifier - 35)))) != 0)) {
				{
				State = 373;
				argumentDeclaration();
				State = 378;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 374;
					Match(Comma);
					State = 375;
					argumentDeclaration();
					}
					}
					State = 380;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 383;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PseudoCodeParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(PseudoCodeParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Byval() { return GetToken(PseudoCodeParser.Byval, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Byref() { return GetToken(PseudoCodeParser.Byref, 0); }
		public ArgumentDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterArgumentDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitArgumentDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentDeclarationContext argumentDeclaration() {
		ArgumentDeclarationContext _localctx = new ArgumentDeclarationContext(Context, State);
		EnterRule(_localctx, 62, RULE_argumentDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Byval || _la==Byref) {
				{
				State = 385;
				_la = TokenStream.LA(1);
				if ( !(_la==Byval || _la==Byref) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 388;
			Match(Identifier);
			State = 389;
			Match(Colon);
			State = 390;
			dataType(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericUtilisationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Smaller() { return GetToken(PseudoCodeParser.Smaller, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeListContext dataTypeList() {
			return GetRuleContext<DataTypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(PseudoCodeParser.Greater, 0); }
		public GenericUtilisationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericUtilisation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterGenericUtilisation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitGenericUtilisation(this);
		}
	}

	[RuleVersion(0)]
	public GenericUtilisationContext genericUtilisation() {
		GenericUtilisationContext _localctx = new GenericUtilisationContext(Context, State);
		EnterRule(_localctx, 64, RULE_genericUtilisation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			Match(Smaller);
			State = 393;
			dataTypeList();
			State = 394;
			Match(Greater);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Smaller() { return GetToken(PseudoCodeParser.Smaller, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(PseudoCodeParser.Greater, 0); }
		public GenericDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterGenericDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitGenericDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public GenericDeclarationContext genericDeclaration() {
		GenericDeclarationContext _localctx = new GenericDeclarationContext(Context, State);
		EnterRule(_localctx, 66, RULE_genericDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			Match(Smaller);
			State = 397;
			identifierList();
			State = 398;
			Match(Greater);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(PseudoCodeParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(PseudoCodeParser.Comma, i);
		}
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 68, RULE_tuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			expression();
			State = 405;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 401;
				Match(Comma);
				State = 402;
				expression();
				}
				}
				State = 407;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext[] dataType() {
			return GetRuleContexts<DataTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType(int i) {
			return GetRuleContext<DataTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(PseudoCodeParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(PseudoCodeParser.Comma, i);
		}
		public DataTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataTypeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterDataTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitDataTypeList(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeListContext dataTypeList() {
		DataTypeListContext _localctx = new DataTypeListContext(Context, State);
		EnterRule(_localctx, 70, RULE_dataTypeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			dataType(0);
			State = 413;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 409;
				Match(Comma);
				State = 410;
				dataType(0);
				}
				}
				State = 415;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(PseudoCodeParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(PseudoCodeParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(PseudoCodeParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(PseudoCodeParser.Comma, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 72, RULE_identifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416;
			Match(Identifier);
			State = 421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 417;
				Match(Comma);
				State = 418;
				Match(Identifier);
				}
				}
				State = 423;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefinitionContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type() { return GetToken(PseudoCodeParser.Type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(PseudoCodeParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(PseudoCodeParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(PseudoCodeParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PseudoCodeParser.Identifier, 0); }
		public EnumDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterEnumDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitEnumDefinition(this);
		}
	}

	[RuleVersion(0)]
	public EnumDefinitionContext enumDefinition() {
		EnumDefinitionContext _localctx = new EnumDefinitionContext(Context, State);
		EnterRule(_localctx, 74, RULE_enumDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424;
			Match(Type);
			State = 425;
			_localctx.name = Match(Identifier);
			State = 426;
			Match(Equal);
			State = 427;
			Match(OpenParen);
			State = 428;
			enumBody();
			State = 429;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(PseudoCodeParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(PseudoCodeParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(PseudoCodeParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(PseudoCodeParser.Comma, i);
		}
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterEnumBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitEnumBody(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(Context, State);
		EnterRule(_localctx, 76, RULE_enumBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			Match(Identifier);
			State = 436;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 432;
				Match(Comma);
				State = 433;
				Match(Identifier);
				}
				}
				State = 438;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAliasDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type() { return GetToken(PseudoCodeParser.Type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PseudoCodeParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(PseudoCodeParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public TypeAliasDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAliasDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterTypeAliasDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitTypeAliasDefinition(this);
		}
	}

	[RuleVersion(0)]
	public TypeAliasDefinitionContext typeAliasDefinition() {
		TypeAliasDefinitionContext _localctx = new TypeAliasDefinitionContext(Context, State);
		EnterRule(_localctx, 78, RULE_typeAliasDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439;
			Match(Type);
			State = 440;
			Match(Identifier);
			State = 441;
			Match(Equal);
			State = 442;
			dataType(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type() { return GetToken(PseudoCodeParser.Type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PseudoCodeParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeBodyContext typeBody() {
			return GetRuleContext<TypeBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Endtype() { return GetToken(PseudoCodeParser.Endtype, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericDeclarationContext genericDeclaration() {
			return GetRuleContext<GenericDeclarationContext>(0);
		}
		public TypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterTypeDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitTypeDefinition(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefinitionContext typeDefinition() {
		TypeDefinitionContext _localctx = new TypeDefinitionContext(Context, State);
		EnterRule(_localctx, 80, RULE_typeDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444;
			Match(Type);
			State = 445;
			Match(Identifier);
			State = 447;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Smaller) {
				{
				State = 446;
				genericDeclaration();
				}
			}

			State = 449;
			typeBody();
			State = 450;
			Match(Endtype);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(PseudoCodeParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(PseudoCodeParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeChildContext[] typeChild() {
			return GetRuleContexts<TypeChildContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeChildContext typeChild(int i) {
			return GetRuleContext<TypeChildContext>(i);
		}
		public TypeBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterTypeBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitTypeBody(this);
		}
	}

	[RuleVersion(0)]
	public TypeBodyContext typeBody() {
		TypeBodyContext _localctx = new TypeBodyContext(Context, State);
		EnterRule(_localctx, 82, RULE_typeBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 452;
			Match(INDENT);
			State = 454;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 453;
				typeChild();
				}
				}
				State = 456;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NL || _la==Declare );
			State = 458;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeChildContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationStatementContext declarationStatement() {
			return GetRuleContext<DeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(PseudoCodeParser.NL, 0); }
		public TypeChildContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeChild; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterTypeChild(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitTypeChild(this);
		}
	}

	[RuleVersion(0)]
	public TypeChildContext typeChild() {
		TypeChildContext _localctx = new TypeChildContext(Context, State);
		EnterRule(_localctx, 84, RULE_typeChild);
		try {
			State = 462;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Declare:
				EnterOuterAlt(_localctx, 1);
				{
				State = 460;
				declarationStatement();
				}
				break;
			case NL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 461;
				Match(NL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefinitionContext : ParserRuleContext {
		public IToken className;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(PseudoCodeParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Endclass() { return GetToken(PseudoCodeParser.Endclass, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PseudoCodeParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericDeclarationContext genericDeclaration() {
			return GetRuleContext<GenericDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inherits() { return GetToken(PseudoCodeParser.Inherits, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModularDataTypeContext modularDataType() {
			return GetRuleContext<ModularDataTypeContext>(0);
		}
		public ClassDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterClassDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitClassDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefinitionContext classDefinition() {
		ClassDefinitionContext _localctx = new ClassDefinitionContext(Context, State);
		EnterRule(_localctx, 86, RULE_classDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464;
			Match(Class);
			State = 465;
			_localctx.className = Match(Identifier);
			State = 467;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Smaller) {
				{
				State = 466;
				genericDeclaration();
				}
			}

			State = 471;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Inherits) {
				{
				State = 469;
				Match(Inherits);
				State = 470;
				modularDataType();
				}
			}

			State = 473;
			classBody();
			State = 474;
			Match(Endclass);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(PseudoCodeParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(PseudoCodeParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassDataMemberContext[] classDataMember() {
			return GetRuleContexts<ClassDataMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDataMemberContext classDataMember(int i) {
			return GetRuleContext<ClassDataMemberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassMethodContext[] classMethod() {
			return GetRuleContexts<ClassMethodContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassMethodContext classMethod(int i) {
			return GetRuleContext<ClassMethodContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatementContext[] assignmentStatement() {
			return GetRuleContexts<AssignmentStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatementContext assignmentStatement(int i) {
			return GetRuleContext<AssignmentStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(PseudoCodeParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(PseudoCodeParser.NL, i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 88, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 476;
			Match(INDENT);
			State = 481;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 481;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
				case 1:
					{
					State = 477;
					classDataMember();
					}
					break;
				case 2:
					{
					State = 478;
					classMethod();
					}
					break;
				case 3:
					{
					State = 479;
					assignmentStatement();
					}
					break;
				case 4:
					{
					State = 480;
					Match(NL);
					}
					break;
				}
				}
				State = 483;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Character) | (1L << String) | (1L << Date) | (1L << NumberSequence) | (1L << Boolean) | (1L << NL) | (1L << Procedure) | (1L << Function) | (1L << OperatorKeyword) | (1L << Private) | (1L << Public) | (1L << New) | (1L << Malloc))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SizeOf - 64)) | (1L << (Not - 64)) | (1L << (OpenParen - 64)) | (1L << (OpenBrack - 64)) | (1L << (Dot - 64)) | (1L << (Subtract - 64)) | (1L << (Caret - 64)) | (1L << (Identifier - 64)))) != 0) );
			State = 485;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDataMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(PseudoCodeParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessLevelContext accessLevel() {
			return GetRuleContext<AccessLevelContext>(0);
		}
		public ClassDataMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDataMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterClassDataMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitClassDataMember(this);
		}
	}

	[RuleVersion(0)]
	public ClassDataMemberContext classDataMember() {
		ClassDataMemberContext _localctx = new ClassDataMemberContext(Context, State);
		EnterRule(_localctx, 90, RULE_classDataMember);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Private || _la==Public) {
				{
				State = 487;
				accessLevel();
				}
			}

			State = 490;
			identifierList();
			State = 491;
			Match(Colon);
			State = 492;
			dataType(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMethodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefinitionContext procedureDefinition() {
			return GetRuleContext<ProcedureDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessLevelContext accessLevel() {
			return GetRuleContext<AccessLevelContext>(0);
		}
		public ClassMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMethod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterClassMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitClassMethod(this);
		}
	}

	[RuleVersion(0)]
	public ClassMethodContext classMethod() {
		ClassMethodContext _localctx = new ClassMethodContext(Context, State);
		EnterRule(_localctx, 92, RULE_classMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Private || _la==Public) {
				{
				State = 494;
				accessLevel();
				}
			}

			State = 499;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Procedure:
				{
				State = 497;
				procedureDefinition();
				}
				break;
			case Function:
			case OperatorKeyword:
				{
				State = 498;
				functionDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessLevelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Public() { return GetToken(PseudoCodeParser.Public, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Private() { return GetToken(PseudoCodeParser.Private, 0); }
		public AccessLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessLevel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterAccessLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitAccessLevel(this);
		}
	}

	[RuleVersion(0)]
	public AccessLevelContext accessLevel() {
		AccessLevelContext _localctx = new AccessLevelContext(Context, State);
		EnterRule(_localctx, 94, RULE_accessLevel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501;
			_la = TokenStream.LA(1);
			if ( !(_la==Private || _la==Public) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicExpressionContext logicExpression() {
			return GetRuleContext<LogicExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 96, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503;
			logicExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicExpressionContext : ParserRuleContext {
		public bool IsUnary;
		public PseudoOperator Operator;
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public LogicExpressionContext[] logicExpression() {
			return GetRuleContexts<LogicExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicExpressionContext logicExpression(int i) {
			return GetRuleContext<LogicExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(PseudoCodeParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExpressionContext arithmeticExpression() {
			return GetRuleContext<ArithmeticExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(PseudoCodeParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(PseudoCodeParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Smaller() { return GetToken(PseudoCodeParser.Smaller, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SmallerEqual() { return GetToken(PseudoCodeParser.SmallerEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(PseudoCodeParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterEqual() { return GetToken(PseudoCodeParser.GreaterEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(PseudoCodeParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEqual() { return GetToken(PseudoCodeParser.NotEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(PseudoCodeParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(PseudoCodeParser.Or, 0); }
		public LogicExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterLogicExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitLogicExpression(this);
		}
	}

	[RuleVersion(0)]
	public LogicExpressionContext logicExpression() {
		return logicExpression(0);
	}

	private LogicExpressionContext logicExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicExpressionContext _localctx = new LogicExpressionContext(Context, _parentState);
		LogicExpressionContext _prevctx = _localctx;
		int _startState = 98;
		EnterRecursionRule(_localctx, 98, RULE_logicExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 518;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 506;
				_localctx.op = Match(Not);
				State = 507;
				logicExpression(5);
				_localctx.IsUnary =  true; _localctx.Operator =  PseudoOperator.Not;
				}
				break;
			case 2:
				{
				State = 510;
				arithmeticExpression(0);
				_localctx.IsUnary =  true;
				}
				break;
			case 3:
				{
				State = 513;
				Match(OpenParen);
				State = 514;
				logicExpression(0);
				State = 515;
				Match(CloseParen);
				_localctx.IsUnary =  true;
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 562;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 560;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
					case 1:
						{
						_localctx = new LogicExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logicExpression);
						State = 520;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 521;
						_localctx.op = Match(Smaller);
						State = 522;
						logicExpression(12);
						_localctx.Operator =  PseudoOperator.Smaller;
						}
						break;
					case 2:
						{
						_localctx = new LogicExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logicExpression);
						State = 525;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 526;
						_localctx.op = Match(SmallerEqual);
						State = 527;
						logicExpression(11);
						_localctx.Operator =  PseudoOperator.SmallerEqual;
						}
						break;
					case 3:
						{
						_localctx = new LogicExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logicExpression);
						State = 530;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 531;
						_localctx.op = Match(Greater);
						State = 532;
						logicExpression(10);
						_localctx.Operator =  PseudoOperator.Greater;
						}
						break;
					case 4:
						{
						_localctx = new LogicExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logicExpression);
						State = 535;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 536;
						_localctx.op = Match(GreaterEqual);
						State = 537;
						logicExpression(9);
						_localctx.Operator =  PseudoOperator.GreaterEqual;
						}
						break;
					case 5:
						{
						_localctx = new LogicExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logicExpression);
						State = 540;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 541;
						_localctx.op = Match(Equal);
						State = 542;
						logicExpression(8);
						_localctx.Operator =  PseudoOperator.Equal;
						}
						break;
					case 6:
						{
						_localctx = new LogicExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logicExpression);
						State = 545;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 546;
						_localctx.op = Match(NotEqual);
						State = 547;
						logicExpression(7);
						_localctx.Operator =  PseudoOperator.NotEqual;
						}
						break;
					case 7:
						{
						_localctx = new LogicExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logicExpression);
						State = 550;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 551;
						_localctx.op = Match(And);
						State = 552;
						logicExpression(5);
						_localctx.Operator =  PseudoOperator.And;
						}
						break;
					case 8:
						{
						_localctx = new LogicExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logicExpression);
						State = 555;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 556;
						_localctx.op = Match(Or);
						State = 557;
						logicExpression(4);
						_localctx.Operator =  PseudoOperator.Or;
						}
						break;
					}
					} 
				}
				State = 564;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArithmeticExpressionContext : ParserRuleContext {
		public bool IsUnary;
		public PseudoOperator Operator = PseudoOperator.None;
		public ArithmeticExpressionContext operand;
		public ArithmeticExpressionContext operand1;
		public IToken op;
		public ArithmeticExpressionContext operand2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(PseudoCodeParser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModularDataTypeContext modularDataType() {
			return GetRuleContext<ModularDataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentiferAccessContext identiferAccess() {
			return GetRuleContext<IdentiferAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SizeOfExpressionContext sizeOfExpression() {
			return GetRuleContext<SizeOfExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MallocExpressionContext mallocExpression() {
			return GetRuleContext<MallocExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret() { return GetToken(PseudoCodeParser.Caret, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExpressionContext[] arithmeticExpression() {
			return GetRuleContexts<ArithmeticExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExpressionContext arithmeticExpression(int i) {
			return GetRuleContext<ArithmeticExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Subtract() { return GetToken(PseudoCodeParser.Subtract, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(PseudoCodeParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(PseudoCodeParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pow() { return GetToken(PseudoCodeParser.Pow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(PseudoCodeParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntDivide() { return GetToken(PseudoCodeParser.IntDivide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(PseudoCodeParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod() { return GetToken(PseudoCodeParser.Mod, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Add() { return GetToken(PseudoCodeParser.Add, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(PseudoCodeParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(PseudoCodeParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PseudoCodeParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericUtilisationContext genericUtilisation() {
			return GetRuleContext<GenericUtilisationContext>(0);
		}
		public ArithmeticExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterArithmeticExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitArithmeticExpression(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticExpressionContext arithmeticExpression() {
		return arithmeticExpression(0);
	}

	private ArithmeticExpressionContext arithmeticExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArithmeticExpressionContext _localctx = new ArithmeticExpressionContext(Context, _parentState);
		ArithmeticExpressionContext _prevctx = _localctx;
		int _startState = 100;
		EnterRecursionRule(_localctx, 100, RULE_arithmeticExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 595;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				{
				State = 566;
				Match(New);
				State = 567;
				modularDataType();
				State = 568;
				arguments();
				}
				break;
			case 2:
				{
				State = 570;
				identiferAccess(0);
				_localctx.IsUnary =  true;
				}
				break;
			case 3:
				{
				State = 573;
				atom();
				_localctx.IsUnary =  true;
				}
				break;
			case 4:
				{
				State = 576;
				sizeOfExpression();
				_localctx.IsUnary =  true;
				}
				break;
			case 5:
				{
				State = 579;
				mallocExpression();
				_localctx.IsUnary =  true;
				}
				break;
			case 6:
				{
				State = 582;
				_localctx.op = Match(Caret);
				State = 583;
				_localctx.operand = arithmeticExpression(12);
				_localctx.IsUnary =  true; _localctx.Operator =  PseudoOperator.GetPointer;
				}
				break;
			case 7:
				{
				State = 586;
				_localctx.op = Match(Subtract);
				State = 587;
				_localctx.operand = arithmeticExpression(9);
				_localctx.IsUnary =  true; _localctx.Operator =  PseudoOperator.Negative;
				}
				break;
			case 8:
				{
				State = 590;
				Match(OpenParen);
				State = 591;
				arithmeticExpression(0);
				State = 592;
				Match(CloseParen);
				_localctx.IsUnary =  true;
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 653;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 651;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
					case 1:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						_localctx.operand1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 597;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 598;
						_localctx.op = Match(Pow);
						State = 599;
						_localctx.operand2 = arithmeticExpression(10);
						_localctx.Operator =  PseudoOperator.Pow;
						}
						break;
					case 2:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						_localctx.operand1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 602;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 603;
						_localctx.op = Match(Divide);
						State = 604;
						_localctx.operand2 = arithmeticExpression(9);
						_localctx.Operator =  PseudoOperator.Divide;
						}
						break;
					case 3:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						_localctx.operand1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 607;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 608;
						_localctx.op = Match(IntDivide);
						State = 609;
						_localctx.operand2 = arithmeticExpression(8);
						_localctx.Operator =  PseudoOperator.IntDivide;
						}
						break;
					case 4:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						_localctx.operand1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 612;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 613;
						_localctx.op = Match(Multiply);
						State = 614;
						_localctx.operand2 = arithmeticExpression(7);
						_localctx.Operator =  PseudoOperator.Multiply;
						}
						break;
					case 5:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						_localctx.operand1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 617;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 618;
						_localctx.op = Match(Mod);
						State = 619;
						_localctx.operand2 = arithmeticExpression(6);
						_localctx.Operator =  PseudoOperator.Mod;
						}
						break;
					case 6:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						_localctx.operand1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 622;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 623;
						_localctx.op = Match(Subtract);
						State = 624;
						_localctx.operand2 = arithmeticExpression(5);
						_localctx.Operator =  PseudoOperator.Subtract;
						}
						break;
					case 7:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						_localctx.operand1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 627;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 628;
						_localctx.op = Match(Add);
						State = 629;
						_localctx.operand2 = arithmeticExpression(4);
						_localctx.Operator =  PseudoOperator.Add;
						}
						break;
					case 8:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						_localctx.operand1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 632;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 633;
						_localctx.op = Match(BitAnd);
						State = 634;
						_localctx.operand2 = arithmeticExpression(3);
						_localctx.Operator =  PseudoOperator.BitAnd;
						}
						break;
					case 9:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 637;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 638;
						Match(Dot);
						State = 639;
						Match(Identifier);
						}
						break;
					case 10:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 640;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 641;
						array();
						_localctx.Operator =  PseudoOperator.ArrayAccess;
						}
						break;
					case 11:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 644;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 645;
						arguments();
						}
						break;
					case 12:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 646;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 647;
						genericUtilisation();
						}
						break;
					case 13:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						_localctx.operand = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 648;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 649;
						_localctx.op = Match(Caret);
						_localctx.IsUnary =  true; _localctx.Operator =  PseudoOperator.GetPointed;
						}
						break;
					}
					} 
				}
				State = 655;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IdentiferAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PseudoCodeParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentiferAccessContext identiferAccess() {
			return GetRuleContext<IdentiferAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NamespaceAccess() { return GetToken(PseudoCodeParser.NamespaceAccess, 0); }
		public IdentiferAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identiferAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterIdentiferAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitIdentiferAccess(this);
		}
	}

	[RuleVersion(0)]
	public IdentiferAccessContext identiferAccess() {
		return identiferAccess(0);
	}

	private IdentiferAccessContext identiferAccess(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		IdentiferAccessContext _localctx = new IdentiferAccessContext(Context, _parentState);
		IdentiferAccessContext _prevctx = _localctx;
		int _startState = 102;
		EnterRecursionRule(_localctx, 102, RULE_identiferAccess, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 657;
			Match(Identifier);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 664;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new IdentiferAccessContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_identiferAccess);
					State = 659;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 660;
					Match(NamespaceAccess);
					State = 661;
					Match(Identifier);
					}
					} 
				}
				State = 666;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(PseudoCodeParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(PseudoCodeParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 104, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 667;
			Match(OpenParen);
			State = 669;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Character) | (1L << String) | (1L << Date) | (1L << NumberSequence) | (1L << Boolean) | (1L << New) | (1L << Malloc))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SizeOf - 64)) | (1L << (Not - 64)) | (1L << (OpenParen - 64)) | (1L << (OpenBrack - 64)) | (1L << (Dot - 64)) | (1L << (Subtract - 64)) | (1L << (Caret - 64)) | (1L << (Identifier - 64)))) != 0)) {
				{
				State = 668;
				tuple();
				}
			}

			State = 671;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public string AtomType;
		public object Value;
		public IToken _String;
		public IToken _Character;
		public IToken _Boolean;
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(PseudoCodeParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Character() { return GetToken(PseudoCodeParser.Character, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Boolean() { return GetToken(PseudoCodeParser.Boolean, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Date() { return GetToken(PseudoCodeParser.Date, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 106, RULE_atom);
		try {
			State = 685;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NumberSequence:
			case Dot:
			case Subtract:
				EnterOuterAlt(_localctx, 1);
				{
				State = 673;
				number();
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 674;
				_localctx._String = Match(String);

				    _localctx.AtomType =  "STRING";
				    var str = System.Text.RegularExpressions.Regex.Unescape((_localctx._String!=null?_localctx._String.Text:null));
				    _localctx.Value =  str.Substring(1, str.Length - 2);
				 
				}
				break;
			case Character:
				EnterOuterAlt(_localctx, 3);
				{
				State = 676;
				_localctx._Character = Match(Character);

				    _localctx.AtomType =  "CHAR";
				    var str = System.Text.RegularExpressions.Regex.Unescape((_localctx._Character!=null?_localctx._Character.Text:null));
				    _localctx.Value =  str[1];
				 
				}
				break;
			case Boolean:
				EnterOuterAlt(_localctx, 4);
				{
				State = 678;
				_localctx._Boolean = Match(Boolean);
				_localctx.AtomType =  "BOOLEAN"; _localctx.Value =  bool.Parse((_localctx._Boolean!=null?_localctx._Boolean.Text:null));
				}
				break;
			case Date:
				EnterOuterAlt(_localctx, 5);
				{
				State = 680;
				Match(Date);
				_localctx.AtomType =  "DATE";
				}
				break;
			case OpenBrack:
				EnterOuterAlt(_localctx, 6);
				{
				State = 682;
				array();
				_localctx.AtomType =  "ARRAY";
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeOfExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SizeOf() { return GetToken(PseudoCodeParser.SizeOf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public SizeOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeOfExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterSizeOfExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitSizeOfExpression(this);
		}
	}

	[RuleVersion(0)]
	public SizeOfExpressionContext sizeOfExpression() {
		SizeOfExpressionContext _localctx = new SizeOfExpressionContext(Context, State);
		EnterRule(_localctx, 108, RULE_sizeOfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 687;
			Match(SizeOf);
			State = 688;
			dataType(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MallocExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Malloc() { return GetToken(PseudoCodeParser.Malloc, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(PseudoCodeParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public MallocExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mallocExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterMallocExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitMallocExpression(this);
		}
	}

	[RuleVersion(0)]
	public MallocExpressionContext mallocExpression() {
		MallocExpressionContext _localctx = new MallocExpressionContext(Context, State);
		EnterRule(_localctx, 110, RULE_mallocExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 690;
			Match(Malloc);
			State = 691;
			expression();
			State = 692;
			Match(For);
			State = 693;
			dataType(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Array() { return GetToken(PseudoCodeParser.Array, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OpenBrack() { return GetTokens(PseudoCodeParser.OpenBrack); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrack(int i) {
			return GetToken(PseudoCodeParser.OpenBrack, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayRangeContext[] arrayRange() {
			return GetRuleContexts<ArrayRangeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayRangeContext arrayRange(int i) {
			return GetRuleContext<ArrayRangeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CloseBrack() { return GetTokens(PseudoCodeParser.CloseBrack); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrack(int i) {
			return GetToken(PseudoCodeParser.CloseBrack, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Of() { return GetToken(PseudoCodeParser.Of, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(PseudoCodeParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(PseudoCodeParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret() { return GetToken(PseudoCodeParser.Caret, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModularDataTypeContext modularDataType() {
			return GetRuleContext<ModularDataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(PseudoCodeParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(PseudoCodeParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitDataType(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeContext dataType() {
		return dataType(0);
	}

	private DataTypeContext dataType(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DataTypeContext _localctx = new DataTypeContext(Context, _parentState);
		DataTypeContext _prevctx = _localctx;
		int _startState = 112;
		EnterRecursionRule(_localctx, 112, RULE_dataType, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 717;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Array:
				{
				State = 696;
				Match(Array);
				State = 697;
				Match(OpenBrack);
				State = 698;
				arrayRange();
				State = 703;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 699;
					Match(Comma);
					State = 700;
					arrayRange();
					}
					}
					State = 705;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 706;
				Match(CloseBrack);
				State = 707;
				Match(Of);
				State = 708;
				dataType(5);
				}
				break;
			case Caret:
				{
				State = 710;
				Match(Caret);
				State = 711;
				dataType(4);
				}
				break;
			case Identifier:
				{
				State = 712;
				modularDataType();
				}
				break;
			case OpenParen:
				{
				State = 713;
				Match(OpenParen);
				State = 714;
				dataType(0);
				State = 715;
				Match(CloseParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 730;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DataTypeContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_dataType);
					State = 719;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 724;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 720;
							Match(OpenBrack);
							State = 721;
							expression();
							State = 722;
							Match(CloseBrack);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 726;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					} 
				}
				State = 732;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ModularDataTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentiferAccessContext identiferAccess() {
			return GetRuleContext<IdentiferAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericUtilisationContext genericUtilisation() {
			return GetRuleContext<GenericUtilisationContext>(0);
		}
		public ModularDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modularDataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterModularDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitModularDataType(this);
		}
	}

	[RuleVersion(0)]
	public ModularDataTypeContext modularDataType() {
		ModularDataTypeContext _localctx = new ModularDataTypeContext(Context, State);
		EnterRule(_localctx, 114, RULE_modularDataType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 733;
			identiferAccess(0);
			State = 735;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 734;
				genericUtilisation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayRangeContext : ParserRuleContext {
		public ExpressionContext s;
		public ExpressionContext e;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(PseudoCodeParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterArrayRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitArrayRange(this);
		}
	}

	[RuleVersion(0)]
	public ArrayRangeContext arrayRange() {
		ArrayRangeContext _localctx = new ArrayRangeContext(Context, State);
		EnterRule(_localctx, 116, RULE_arrayRange);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 737;
			_localctx.s = expression();
			State = 738;
			Match(Colon);
			State = 739;
			_localctx.e = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrack() { return GetToken(PseudoCodeParser.OpenBrack, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrack() { return GetToken(PseudoCodeParser.CloseBrack, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(PseudoCodeParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(PseudoCodeParser.Comma, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 118, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 741;
			Match(OpenBrack);
			State = 742;
			expression();
			State = 747;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 743;
				Match(Comma);
				State = 744;
				expression();
				}
				}
				State = 749;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 750;
			Match(CloseBrack);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public IntegerContext _integer;
		public DecimalContext _decimal;
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalContext @decimal() {
			return GetRuleContext<DecimalContext>(0);
		}
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 120, RULE_number);
		try {
			State = 758;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 752;
				_localctx._integer = integer();
				((AtomContext)GetInvokingContext(53)).AtomType =  "INTEGER"; ((AtomContext)GetInvokingContext(53)).Value =  long.Parse((_localctx._integer!=null?TokenStream.GetText(_localctx._integer.Start,_localctx._integer.Stop):null));
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 755;
				_localctx._decimal = @decimal();
				((AtomContext)GetInvokingContext(53)).AtomType =  "REAL"; ((AtomContext)GetInvokingContext(53)).Value =  RealNumberType.Parse((_localctx._decimal!=null?TokenStream.GetText(_localctx._decimal.Start,_localctx._decimal.Stop):null));
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(PseudoCodeParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NumberSequence() { return GetTokens(PseudoCodeParser.NumberSequence); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberSequence(int i) {
			return GetToken(PseudoCodeParser.NumberSequence, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Subtract() { return GetToken(PseudoCodeParser.Subtract, 0); }
		public DecimalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterDecimal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitDecimal(this);
		}
	}

	[RuleVersion(0)]
	public DecimalContext @decimal() {
		DecimalContext _localctx = new DecimalContext(Context, State);
		EnterRule(_localctx, 122, RULE_decimal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 761;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Subtract) {
				{
				State = 760;
				Match(Subtract);
				}
			}

			State = 773;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				{
				State = 764;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NumberSequence) {
					{
					State = 763;
					Match(NumberSequence);
					}
				}

				State = 766;
				Match(Dot);
				State = 767;
				Match(NumberSequence);
				}
				break;
			case 2:
				{
				State = 768;
				Match(NumberSequence);
				State = 769;
				Match(Dot);
				State = 771;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
				case 1:
					{
					State = 770;
					Match(NumberSequence);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberSequence() { return GetToken(PseudoCodeParser.NumberSequence, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Subtract() { return GetToken(PseudoCodeParser.Subtract, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitInteger(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 124, RULE_integer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 776;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Subtract) {
				{
				State = 775;
				Match(Subtract);
				}
			}

			State = 778;
			Match(NumberSequence);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierWithNewContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PseudoCodeParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(PseudoCodeParser.New, 0); }
		public IdentifierWithNewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierWithNew; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.EnterIdentifierWithNew(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoCodeListener typedListener = listener as IPseudoCodeListener;
			if (typedListener != null) typedListener.ExitIdentifierWithNew(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierWithNewContext identifierWithNew() {
		IdentifierWithNewContext _localctx = new IdentifierWithNewContext(Context, State);
		EnterRule(_localctx, 126, RULE_identifierWithNew);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 780;
			_la = TokenStream.LA(1);
			if ( !(_la==New || _la==Identifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 49: return logicExpression_sempred((LogicExpressionContext)_localctx, predIndex);
		case 50: return arithmeticExpression_sempred((ArithmeticExpressionContext)_localctx, predIndex);
		case 51: return identiferAccess_sempred((IdentiferAccessContext)_localctx, predIndex);
		case 56: return dataType_sempred((DataTypeContext)_localctx, predIndex);
		}
		return true;
	}
	private bool logicExpression_sempred(LogicExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 4);
		case 7: return Precpred(Context, 3);
		}
		return true;
	}
	private bool arithmeticExpression_sempred(ArithmeticExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 10);
		case 9: return Precpred(Context, 8);
		case 10: return Precpred(Context, 7);
		case 11: return Precpred(Context, 6);
		case 12: return Precpred(Context, 5);
		case 13: return Precpred(Context, 4);
		case 14: return Precpred(Context, 3);
		case 15: return Precpred(Context, 2);
		case 16: return Precpred(Context, 16);
		case 17: return Precpred(Context, 15);
		case 18: return Precpred(Context, 14);
		case 19: return Precpred(Context, 13);
		case 20: return Precpred(Context, 11);
		}
		return true;
	}
	private bool identiferAccess_sempred(IdentiferAccessContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21: return Precpred(Context, 2);
		}
		return true;
	}
	private bool dataType_sempred(DataTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,99,783,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		1,0,5,0,130,8,0,10,0,12,0,133,9,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,3,2,142,
		8,2,1,2,3,2,145,8,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,158,
		8,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,
		8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
		11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
		11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,215,8,11,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,230,8,12,1,
		13,1,13,1,14,1,14,4,14,236,8,14,11,14,12,14,237,1,14,1,14,1,15,1,15,1,
		15,4,15,245,8,15,11,15,12,15,246,1,15,1,15,3,15,251,8,15,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,3,16,261,8,16,1,16,1,16,1,17,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,3,17,273,8,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,
		1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,3,20,294,8,20,1,
		21,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,
		24,1,24,3,24,312,8,24,1,24,1,24,1,24,3,24,317,8,24,1,25,1,25,4,25,321,
		8,25,11,25,12,25,322,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,
		3,27,335,8,27,1,27,3,27,338,8,27,1,27,1,27,3,27,342,8,27,1,27,1,27,1,28,
		1,28,1,28,3,28,349,8,28,1,28,3,28,352,8,28,1,28,1,28,1,28,1,29,1,29,1,
		29,3,29,360,8,29,1,29,3,29,363,8,29,1,29,1,29,3,29,367,8,29,1,29,1,29,
		1,29,1,29,1,30,1,30,1,30,1,30,5,30,377,8,30,10,30,12,30,380,9,30,3,30,
		382,8,30,1,30,1,30,1,31,3,31,387,8,31,1,31,1,31,1,31,1,31,1,32,1,32,1,
		32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,5,34,404,8,34,10,34,12,34,407,
		9,34,1,35,1,35,1,35,5,35,412,8,35,10,35,12,35,415,9,35,1,36,1,36,1,36,
		5,36,420,8,36,10,36,12,36,423,9,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
		1,38,1,38,1,38,5,38,435,8,38,10,38,12,38,438,9,38,1,39,1,39,1,39,1,39,
		1,39,1,40,1,40,1,40,3,40,448,8,40,1,40,1,40,1,40,1,41,1,41,4,41,455,8,
		41,11,41,12,41,456,1,41,1,41,1,42,1,42,3,42,463,8,42,1,43,1,43,1,43,3,
		43,468,8,43,1,43,1,43,3,43,472,8,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,
		1,44,4,44,482,8,44,11,44,12,44,483,1,44,1,44,1,45,3,45,489,8,45,1,45,1,
		45,1,45,1,45,1,46,3,46,496,8,46,1,46,1,46,3,46,500,8,46,1,47,1,47,1,48,
		1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
		3,49,519,8,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,
		49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,
		49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,
		49,5,49,561,8,49,10,49,12,49,564,9,49,1,50,1,50,1,50,1,50,1,50,1,50,1,
		50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
		50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,596,8,50,1,50,1,50,
		1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
		1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
		1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
		1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,5,50,652,8,50,10,50,
		12,50,655,9,50,1,51,1,51,1,51,1,51,1,51,1,51,5,51,663,8,51,10,51,12,51,
		666,9,51,1,52,1,52,3,52,670,8,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,
		53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,686,8,53,1,54,1,54,1,54,1,55,1,55,
		1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,56,5,56,702,8,56,10,56,12,56,
		705,9,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,718,
		8,56,1,56,1,56,1,56,1,56,1,56,4,56,725,8,56,11,56,12,56,726,5,56,729,8,
		56,10,56,12,56,732,9,56,1,57,1,57,3,57,736,8,57,1,58,1,58,1,58,1,58,1,
		59,1,59,1,59,1,59,5,59,746,8,59,10,59,12,59,749,9,59,1,59,1,59,1,60,1,
		60,1,60,1,60,1,60,1,60,3,60,759,8,60,1,61,3,61,762,8,61,1,61,3,61,765,
		8,61,1,61,1,61,1,61,1,61,1,61,3,61,772,8,61,3,61,774,8,61,1,62,3,62,777,
		8,62,1,62,1,62,1,63,1,63,1,63,0,4,98,100,102,112,64,0,2,4,6,8,10,12,14,
		16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
		64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
		108,110,112,114,116,118,120,122,124,126,0,5,1,0,50,53,2,0,33,33,39,39,
		1,0,35,36,1,0,57,58,2,0,59,59,95,95,835,0,131,1,0,0,0,2,136,1,0,0,0,4,
		144,1,0,0,0,6,146,1,0,0,0,8,157,1,0,0,0,10,159,1,0,0,0,12,163,1,0,0,0,
		14,168,1,0,0,0,16,173,1,0,0,0,18,176,1,0,0,0,20,179,1,0,0,0,22,214,1,0,
		0,0,24,229,1,0,0,0,26,231,1,0,0,0,28,233,1,0,0,0,30,241,1,0,0,0,32,252,
		1,0,0,0,34,264,1,0,0,0,36,278,1,0,0,0,38,283,1,0,0,0,40,288,1,0,0,0,42,
		295,1,0,0,0,44,299,1,0,0,0,46,302,1,0,0,0,48,316,1,0,0,0,50,318,1,0,0,
		0,52,326,1,0,0,0,54,330,1,0,0,0,56,345,1,0,0,0,58,356,1,0,0,0,60,372,1,
		0,0,0,62,386,1,0,0,0,64,392,1,0,0,0,66,396,1,0,0,0,68,400,1,0,0,0,70,408,
		1,0,0,0,72,416,1,0,0,0,74,424,1,0,0,0,76,431,1,0,0,0,78,439,1,0,0,0,80,
		444,1,0,0,0,82,452,1,0,0,0,84,462,1,0,0,0,86,464,1,0,0,0,88,476,1,0,0,
		0,90,488,1,0,0,0,92,495,1,0,0,0,94,501,1,0,0,0,96,503,1,0,0,0,98,518,1,
		0,0,0,100,595,1,0,0,0,102,656,1,0,0,0,104,667,1,0,0,0,106,685,1,0,0,0,
		108,687,1,0,0,0,110,690,1,0,0,0,112,717,1,0,0,0,114,733,1,0,0,0,116,737,
		1,0,0,0,118,741,1,0,0,0,120,758,1,0,0,0,122,761,1,0,0,0,124,776,1,0,0,
		0,126,780,1,0,0,0,128,130,3,4,2,0,129,128,1,0,0,0,130,133,1,0,0,0,131,
		129,1,0,0,0,131,132,1,0,0,0,132,134,1,0,0,0,133,131,1,0,0,0,134,135,5,
		0,0,1,135,1,1,0,0,0,136,137,3,4,2,0,137,138,5,6,0,0,138,3,1,0,0,0,139,
		142,3,6,3,0,140,142,3,24,12,0,141,139,1,0,0,0,141,140,1,0,0,0,142,145,
		1,0,0,0,143,145,5,6,0,0,144,141,1,0,0,0,144,143,1,0,0,0,145,5,1,0,0,0,
		146,147,3,8,4,0,147,7,1,0,0,0,148,158,3,10,5,0,149,158,3,12,6,0,150,158,
		3,14,7,0,151,158,3,16,8,0,152,158,3,22,11,0,153,158,3,18,9,0,154,158,3,
		20,10,0,155,158,3,40,20,0,156,158,3,42,21,0,157,148,1,0,0,0,157,149,1,
		0,0,0,157,150,1,0,0,0,157,151,1,0,0,0,157,152,1,0,0,0,157,153,1,0,0,0,
		157,154,1,0,0,0,157,155,1,0,0,0,157,156,1,0,0,0,158,9,1,0,0,0,159,160,
		3,96,48,0,160,161,5,93,0,0,161,162,3,96,48,0,162,11,1,0,0,0,163,164,5,
		8,0,0,164,165,3,72,36,0,165,166,5,75,0,0,166,167,3,112,56,0,167,13,1,0,
		0,0,168,169,5,9,0,0,169,170,5,95,0,0,170,171,5,87,0,0,171,172,3,96,48,
		0,172,15,1,0,0,0,173,174,5,10,0,0,174,175,3,68,34,0,175,17,1,0,0,0,176,
		177,5,38,0,0,177,178,3,96,48,0,178,19,1,0,0,0,179,180,5,31,0,0,180,181,
		3,96,48,0,181,21,1,0,0,0,182,183,5,43,0,0,183,184,3,96,48,0,184,185,5,
		16,0,0,185,186,7,0,0,0,186,215,1,0,0,0,187,188,5,44,0,0,188,189,3,96,48,
		0,189,190,5,76,0,0,190,191,3,96,48,0,191,215,1,0,0,0,192,193,5,45,0,0,
		193,194,3,96,48,0,194,195,5,76,0,0,195,196,3,96,48,0,196,215,1,0,0,0,197,
		198,5,46,0,0,198,215,3,96,48,0,199,200,5,47,0,0,200,201,3,96,48,0,201,
		202,5,76,0,0,202,203,3,96,48,0,203,215,1,0,0,0,204,205,5,48,0,0,205,206,
		3,96,48,0,206,207,5,76,0,0,207,208,3,96,48,0,208,215,1,0,0,0,209,210,5,
		49,0,0,210,211,3,96,48,0,211,212,5,76,0,0,212,213,3,96,48,0,213,215,1,
		0,0,0,214,182,1,0,0,0,214,187,1,0,0,0,214,192,1,0,0,0,214,197,1,0,0,0,
		214,199,1,0,0,0,214,204,1,0,0,0,214,209,1,0,0,0,215,23,1,0,0,0,216,230,
		3,32,16,0,217,230,3,46,23,0,218,230,3,36,18,0,219,230,3,34,17,0,220,230,
		3,38,19,0,221,230,3,44,22,0,222,230,3,54,27,0,223,230,3,56,28,0,224,230,
		3,58,29,0,225,230,3,80,40,0,226,230,3,74,37,0,227,230,3,78,39,0,228,230,
		3,86,43,0,229,216,1,0,0,0,229,217,1,0,0,0,229,218,1,0,0,0,229,219,1,0,
		0,0,229,220,1,0,0,0,229,221,1,0,0,0,229,222,1,0,0,0,229,223,1,0,0,0,229,
		224,1,0,0,0,229,225,1,0,0,0,229,226,1,0,0,0,229,227,1,0,0,0,229,228,1,
		0,0,0,230,25,1,0,0,0,231,232,3,96,48,0,232,27,1,0,0,0,233,235,5,98,0,0,
		234,236,3,4,2,0,235,234,1,0,0,0,236,237,1,0,0,0,237,235,1,0,0,0,237,238,
		1,0,0,0,238,239,1,0,0,0,239,240,5,99,0,0,240,29,1,0,0,0,241,250,3,4,2,
		0,242,244,5,98,0,0,243,245,3,4,2,0,244,243,1,0,0,0,245,246,1,0,0,0,246,
		244,1,0,0,0,246,247,1,0,0,0,247,248,1,0,0,0,248,249,5,99,0,0,249,251,1,
		0,0,0,250,242,1,0,0,0,250,251,1,0,0,0,251,31,1,0,0,0,252,253,5,25,0,0,
		253,254,3,26,13,0,254,255,5,26,0,0,255,260,3,28,14,0,256,257,5,27,0,0,
		257,258,3,28,14,0,258,259,6,16,-1,0,259,261,1,0,0,0,260,256,1,0,0,0,260,
		261,1,0,0,0,261,262,1,0,0,0,262,263,5,28,0,0,263,33,1,0,0,0,264,265,5,
		16,0,0,265,266,3,10,5,0,266,267,5,17,0,0,267,272,3,26,13,0,268,269,5,18,
		0,0,269,270,3,26,13,0,270,271,6,17,-1,0,271,273,1,0,0,0,272,268,1,0,0,
		0,272,273,1,0,0,0,273,274,1,0,0,0,274,275,3,28,14,0,275,276,5,19,0,0,276,
		277,3,26,13,0,277,35,1,0,0,0,278,279,5,20,0,0,279,280,3,26,13,0,280,281,
		3,28,14,0,281,282,5,22,0,0,282,37,1,0,0,0,283,284,5,23,0,0,284,285,3,28,
		14,0,285,286,5,24,0,0,286,287,3,26,13,0,287,39,1,0,0,0,288,289,5,60,0,
		0,289,293,3,102,51,0,290,291,3,28,14,0,291,292,5,61,0,0,292,294,1,0,0,
		0,293,290,1,0,0,0,293,294,1,0,0,0,294,41,1,0,0,0,295,296,5,62,0,0,296,
		297,5,60,0,0,297,298,3,102,51,0,298,43,1,0,0,0,299,300,5,65,0,0,300,301,
		3,106,53,0,301,45,1,0,0,0,302,303,5,12,0,0,303,304,3,96,48,0,304,305,5,
		13,0,0,305,306,3,50,25,0,306,307,5,15,0,0,307,47,1,0,0,0,308,312,5,14,
		0,0,309,312,3,26,13,0,310,312,3,52,26,0,311,308,1,0,0,0,311,309,1,0,0,
		0,311,310,1,0,0,0,312,313,1,0,0,0,313,314,5,75,0,0,314,317,3,30,15,0,315,
		317,5,6,0,0,316,311,1,0,0,0,316,315,1,0,0,0,317,49,1,0,0,0,318,320,5,98,
		0,0,319,321,3,48,24,0,320,319,1,0,0,0,321,322,1,0,0,0,322,320,1,0,0,0,
		322,323,1,0,0,0,323,324,1,0,0,0,324,325,5,99,0,0,325,51,1,0,0,0,326,327,
		3,26,13,0,327,328,5,17,0,0,328,329,3,26,13,0,329,53,1,0,0,0,330,331,5,
		32,0,0,331,332,5,33,0,0,332,334,5,95,0,0,333,335,3,66,33,0,334,333,1,0,
		0,0,334,335,1,0,0,0,335,337,1,0,0,0,336,338,3,60,30,0,337,336,1,0,0,0,
		337,338,1,0,0,0,338,339,1,0,0,0,339,341,5,37,0,0,340,342,5,36,0,0,341,
		340,1,0,0,0,341,342,1,0,0,0,342,343,1,0,0,0,343,344,3,112,56,0,344,55,
		1,0,0,0,345,346,5,29,0,0,346,348,3,126,63,0,347,349,3,66,33,0,348,347,
		1,0,0,0,348,349,1,0,0,0,349,351,1,0,0,0,350,352,3,60,30,0,351,350,1,0,
		0,0,351,352,1,0,0,0,352,353,1,0,0,0,353,354,3,28,14,0,354,355,5,30,0,0,
		355,57,1,0,0,0,356,357,7,1,0,0,357,359,5,95,0,0,358,360,3,66,33,0,359,
		358,1,0,0,0,359,360,1,0,0,0,360,362,1,0,0,0,361,363,3,60,30,0,362,361,
		1,0,0,0,362,363,1,0,0,0,363,364,1,0,0,0,364,366,5,37,0,0,365,367,5,36,
		0,0,366,365,1,0,0,0,366,367,1,0,0,0,367,368,1,0,0,0,368,369,3,112,56,0,
		369,370,3,28,14,0,370,371,5,34,0,0,371,59,1,0,0,0,372,381,5,69,0,0,373,
		378,3,62,31,0,374,375,5,76,0,0,375,377,3,62,31,0,376,374,1,0,0,0,377,380,
		1,0,0,0,378,376,1,0,0,0,378,379,1,0,0,0,379,382,1,0,0,0,380,378,1,0,0,
		0,381,373,1,0,0,0,381,382,1,0,0,0,382,383,1,0,0,0,383,384,5,70,0,0,384,
		61,1,0,0,0,385,387,7,2,0,0,386,385,1,0,0,0,386,387,1,0,0,0,387,388,1,0,
		0,0,388,389,5,95,0,0,389,390,5,75,0,0,390,391,3,112,56,0,391,63,1,0,0,
		0,392,393,5,89,0,0,393,394,3,70,35,0,394,395,5,88,0,0,395,65,1,0,0,0,396,
		397,5,89,0,0,397,398,3,72,36,0,398,399,5,88,0,0,399,67,1,0,0,0,400,405,
		3,96,48,0,401,402,5,76,0,0,402,404,3,96,48,0,403,401,1,0,0,0,404,407,1,
		0,0,0,405,403,1,0,0,0,405,406,1,0,0,0,406,69,1,0,0,0,407,405,1,0,0,0,408,
		413,3,112,56,0,409,410,5,76,0,0,410,412,3,112,56,0,411,409,1,0,0,0,412,
		415,1,0,0,0,413,411,1,0,0,0,413,414,1,0,0,0,414,71,1,0,0,0,415,413,1,0,
		0,0,416,421,5,95,0,0,417,418,5,76,0,0,418,420,5,95,0,0,419,417,1,0,0,0,
		420,423,1,0,0,0,421,419,1,0,0,0,421,422,1,0,0,0,422,73,1,0,0,0,423,421,
		1,0,0,0,424,425,5,41,0,0,425,426,5,95,0,0,426,427,5,87,0,0,427,428,5,69,
		0,0,428,429,3,76,38,0,429,430,5,70,0,0,430,75,1,0,0,0,431,436,5,95,0,0,
		432,433,5,76,0,0,433,435,5,95,0,0,434,432,1,0,0,0,435,438,1,0,0,0,436,
		434,1,0,0,0,436,437,1,0,0,0,437,77,1,0,0,0,438,436,1,0,0,0,439,440,5,41,
		0,0,440,441,5,95,0,0,441,442,5,87,0,0,442,443,3,112,56,0,443,79,1,0,0,
		0,444,445,5,41,0,0,445,447,5,95,0,0,446,448,3,66,33,0,447,446,1,0,0,0,
		447,448,1,0,0,0,448,449,1,0,0,0,449,450,3,82,41,0,450,451,5,42,0,0,451,
		81,1,0,0,0,452,454,5,98,0,0,453,455,3,84,42,0,454,453,1,0,0,0,455,456,
		1,0,0,0,456,454,1,0,0,0,456,457,1,0,0,0,457,458,1,0,0,0,458,459,5,99,0,
		0,459,83,1,0,0,0,460,463,3,12,6,0,461,463,5,6,0,0,462,460,1,0,0,0,462,
		461,1,0,0,0,463,85,1,0,0,0,464,465,5,54,0,0,465,467,5,95,0,0,466,468,3,
		66,33,0,467,466,1,0,0,0,467,468,1,0,0,0,468,471,1,0,0,0,469,470,5,56,0,
		0,470,472,3,114,57,0,471,469,1,0,0,0,471,472,1,0,0,0,472,473,1,0,0,0,473,
		474,3,88,44,0,474,475,5,55,0,0,475,87,1,0,0,0,476,481,5,98,0,0,477,482,
		3,90,45,0,478,482,3,92,46,0,479,482,3,10,5,0,480,482,5,6,0,0,481,477,1,
		0,0,0,481,478,1,0,0,0,481,479,1,0,0,0,481,480,1,0,0,0,482,483,1,0,0,0,
		483,481,1,0,0,0,483,484,1,0,0,0,484,485,1,0,0,0,485,486,5,99,0,0,486,89,
		1,0,0,0,487,489,3,94,47,0,488,487,1,0,0,0,488,489,1,0,0,0,489,490,1,0,
		0,0,490,491,3,72,36,0,491,492,5,75,0,0,492,493,3,112,56,0,493,91,1,0,0,
		0,494,496,3,94,47,0,495,494,1,0,0,0,495,496,1,0,0,0,496,499,1,0,0,0,497,
		500,3,56,28,0,498,500,3,58,29,0,499,497,1,0,0,0,499,498,1,0,0,0,500,93,
		1,0,0,0,501,502,7,3,0,0,502,95,1,0,0,0,503,504,3,98,49,0,504,97,1,0,0,
		0,505,506,6,49,-1,0,506,507,5,68,0,0,507,508,3,98,49,5,508,509,6,49,-1,
		0,509,519,1,0,0,0,510,511,3,100,50,0,511,512,6,49,-1,0,512,519,1,0,0,0,
		513,514,5,69,0,0,514,515,3,98,49,0,515,516,5,70,0,0,516,517,6,49,-1,0,
		517,519,1,0,0,0,518,505,1,0,0,0,518,510,1,0,0,0,518,513,1,0,0,0,519,562,
		1,0,0,0,520,521,10,11,0,0,521,522,5,89,0,0,522,523,3,98,49,12,523,524,
		6,49,-1,0,524,561,1,0,0,0,525,526,10,10,0,0,526,527,5,91,0,0,527,528,3,
		98,49,11,528,529,6,49,-1,0,529,561,1,0,0,0,530,531,10,9,0,0,531,532,5,
		88,0,0,532,533,3,98,49,10,533,534,6,49,-1,0,534,561,1,0,0,0,535,536,10,
		8,0,0,536,537,5,90,0,0,537,538,3,98,49,9,538,539,6,49,-1,0,539,561,1,0,
		0,0,540,541,10,7,0,0,541,542,5,87,0,0,542,543,3,98,49,8,543,544,6,49,-1,
		0,544,561,1,0,0,0,545,546,10,6,0,0,546,547,5,92,0,0,547,548,3,98,49,7,
		548,549,6,49,-1,0,549,561,1,0,0,0,550,551,10,4,0,0,551,552,5,66,0,0,552,
		553,3,98,49,5,553,554,6,49,-1,0,554,561,1,0,0,0,555,556,10,3,0,0,556,557,
		5,67,0,0,557,558,3,98,49,4,558,559,6,49,-1,0,559,561,1,0,0,0,560,520,1,
		0,0,0,560,525,1,0,0,0,560,530,1,0,0,0,560,535,1,0,0,0,560,540,1,0,0,0,
		560,545,1,0,0,0,560,550,1,0,0,0,560,555,1,0,0,0,561,564,1,0,0,0,562,560,
		1,0,0,0,562,563,1,0,0,0,563,99,1,0,0,0,564,562,1,0,0,0,565,566,6,50,-1,
		0,566,567,5,59,0,0,567,568,3,114,57,0,568,569,3,104,52,0,569,596,1,0,0,
		0,570,571,3,102,51,0,571,572,6,50,-1,0,572,596,1,0,0,0,573,574,3,106,53,
		0,574,575,6,50,-1,0,575,596,1,0,0,0,576,577,3,108,54,0,577,578,6,50,-1,
		0,578,596,1,0,0,0,579,580,3,110,55,0,580,581,6,50,-1,0,581,596,1,0,0,0,
		582,583,5,86,0,0,583,584,3,100,50,12,584,585,6,50,-1,0,585,596,1,0,0,0,
		586,587,5,79,0,0,587,588,3,100,50,9,588,589,6,50,-1,0,589,596,1,0,0,0,
		590,591,5,69,0,0,591,592,3,100,50,0,592,593,5,70,0,0,593,594,6,50,-1,0,
		594,596,1,0,0,0,595,565,1,0,0,0,595,570,1,0,0,0,595,573,1,0,0,0,595,576,
		1,0,0,0,595,579,1,0,0,0,595,582,1,0,0,0,595,586,1,0,0,0,595,590,1,0,0,
		0,596,653,1,0,0,0,597,598,10,10,0,0,598,599,5,85,0,0,599,600,3,100,50,
		10,600,601,6,50,-1,0,601,652,1,0,0,0,602,603,10,8,0,0,603,604,5,83,0,0,
		604,605,3,100,50,9,605,606,6,50,-1,0,606,652,1,0,0,0,607,608,10,7,0,0,
		608,609,5,82,0,0,609,610,3,100,50,8,610,611,6,50,-1,0,611,652,1,0,0,0,
		612,613,10,6,0,0,613,614,5,80,0,0,614,615,3,100,50,7,615,616,6,50,-1,0,
		616,652,1,0,0,0,617,618,10,5,0,0,618,619,5,84,0,0,619,620,3,100,50,6,620,
		621,6,50,-1,0,621,652,1,0,0,0,622,623,10,4,0,0,623,624,5,79,0,0,624,625,
		3,100,50,5,625,626,6,50,-1,0,626,652,1,0,0,0,627,628,10,3,0,0,628,629,
		5,78,0,0,629,630,3,100,50,4,630,631,6,50,-1,0,631,652,1,0,0,0,632,633,
		10,2,0,0,633,634,5,81,0,0,634,635,3,100,50,3,635,636,6,50,-1,0,636,652,
		1,0,0,0,637,638,10,16,0,0,638,639,5,77,0,0,639,652,5,95,0,0,640,641,10,
		15,0,0,641,642,3,118,59,0,642,643,6,50,-1,0,643,652,1,0,0,0,644,645,10,
		14,0,0,645,652,3,104,52,0,646,647,10,13,0,0,647,652,3,64,32,0,648,649,
		10,11,0,0,649,650,5,86,0,0,650,652,6,50,-1,0,651,597,1,0,0,0,651,602,1,
		0,0,0,651,607,1,0,0,0,651,612,1,0,0,0,651,617,1,0,0,0,651,622,1,0,0,0,
		651,627,1,0,0,0,651,632,1,0,0,0,651,637,1,0,0,0,651,640,1,0,0,0,651,644,
		1,0,0,0,651,646,1,0,0,0,651,648,1,0,0,0,652,655,1,0,0,0,653,651,1,0,0,
		0,653,654,1,0,0,0,654,101,1,0,0,0,655,653,1,0,0,0,656,657,6,51,-1,0,657,
		658,5,95,0,0,658,664,1,0,0,0,659,660,10,2,0,0,660,661,5,94,0,0,661,663,
		5,95,0,0,662,659,1,0,0,0,663,666,1,0,0,0,664,662,1,0,0,0,664,665,1,0,0,
		0,665,103,1,0,0,0,666,664,1,0,0,0,667,669,5,69,0,0,668,670,3,68,34,0,669,
		668,1,0,0,0,669,670,1,0,0,0,670,671,1,0,0,0,671,672,5,70,0,0,672,105,1,
		0,0,0,673,686,3,120,60,0,674,675,5,2,0,0,675,686,6,53,-1,0,676,677,5,1,
		0,0,677,686,6,53,-1,0,678,679,5,5,0,0,679,686,6,53,-1,0,680,681,5,3,0,
		0,681,686,6,53,-1,0,682,683,3,118,59,0,683,684,6,53,-1,0,684,686,1,0,0,
		0,685,673,1,0,0,0,685,674,1,0,0,0,685,676,1,0,0,0,685,678,1,0,0,0,685,
		680,1,0,0,0,685,682,1,0,0,0,686,107,1,0,0,0,687,688,5,64,0,0,688,689,3,
		112,56,0,689,109,1,0,0,0,690,691,5,63,0,0,691,692,3,96,48,0,692,693,5,
		16,0,0,693,694,3,112,56,0,694,111,1,0,0,0,695,696,6,56,-1,0,696,697,5,
		11,0,0,697,698,5,71,0,0,698,703,3,116,58,0,699,700,5,76,0,0,700,702,3,
		116,58,0,701,699,1,0,0,0,702,705,1,0,0,0,703,701,1,0,0,0,703,704,1,0,0,
		0,704,706,1,0,0,0,705,703,1,0,0,0,706,707,5,72,0,0,707,708,5,13,0,0,708,
		709,3,112,56,5,709,718,1,0,0,0,710,711,5,86,0,0,711,718,3,112,56,4,712,
		718,3,114,57,0,713,714,5,69,0,0,714,715,3,112,56,0,715,716,5,70,0,0,716,
		718,1,0,0,0,717,695,1,0,0,0,717,710,1,0,0,0,717,712,1,0,0,0,717,713,1,
		0,0,0,718,730,1,0,0,0,719,724,10,1,0,0,720,721,5,71,0,0,721,722,3,96,48,
		0,722,723,5,72,0,0,723,725,1,0,0,0,724,720,1,0,0,0,725,726,1,0,0,0,726,
		724,1,0,0,0,726,727,1,0,0,0,727,729,1,0,0,0,728,719,1,0,0,0,729,732,1,
		0,0,0,730,728,1,0,0,0,730,731,1,0,0,0,731,113,1,0,0,0,732,730,1,0,0,0,
		733,735,3,102,51,0,734,736,3,64,32,0,735,734,1,0,0,0,735,736,1,0,0,0,736,
		115,1,0,0,0,737,738,3,96,48,0,738,739,5,75,0,0,739,740,3,96,48,0,740,117,
		1,0,0,0,741,742,5,71,0,0,742,747,3,96,48,0,743,744,5,76,0,0,744,746,3,
		96,48,0,745,743,1,0,0,0,746,749,1,0,0,0,747,745,1,0,0,0,747,748,1,0,0,
		0,748,750,1,0,0,0,749,747,1,0,0,0,750,751,5,72,0,0,751,119,1,0,0,0,752,
		753,3,124,62,0,753,754,6,60,-1,0,754,759,1,0,0,0,755,756,3,122,61,0,756,
		757,6,60,-1,0,757,759,1,0,0,0,758,752,1,0,0,0,758,755,1,0,0,0,759,121,
		1,0,0,0,760,762,5,79,0,0,761,760,1,0,0,0,761,762,1,0,0,0,762,773,1,0,0,
		0,763,765,5,4,0,0,764,763,1,0,0,0,764,765,1,0,0,0,765,766,1,0,0,0,766,
		767,5,77,0,0,767,774,5,4,0,0,768,769,5,4,0,0,769,771,5,77,0,0,770,772,
		5,4,0,0,771,770,1,0,0,0,771,772,1,0,0,0,772,774,1,0,0,0,773,764,1,0,0,
		0,773,768,1,0,0,0,774,123,1,0,0,0,775,777,5,79,0,0,776,775,1,0,0,0,776,
		777,1,0,0,0,777,778,1,0,0,0,778,779,5,4,0,0,779,125,1,0,0,0,780,781,7,
		4,0,0,781,127,1,0,0,0,61,131,141,144,157,214,229,237,246,250,260,272,293,
		311,316,322,334,337,341,348,351,359,362,366,378,381,386,405,413,421,436,
		447,456,462,467,471,481,483,488,495,499,518,560,562,595,651,653,664,669,
		685,703,717,726,730,735,747,758,761,764,771,773,776
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
